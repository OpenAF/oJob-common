{"jobs":[{"name":"ojob debug","exec":"ow.loadFormat();print(\"\");cprint(ow.format.withSideLine(\"ARGS:\",__,\"YELLOW\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify(args),__,\"YELLOW\",__,ow.format.withSideLineThemes().openTopCurvedRect));cprint(ow.format.withSideLine(\"RES:\",__,\"YELLOW,BOLD\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify($get(\"res\")),__,\"YELLOW,BOLD\",__,ow.format.withSideLineThemes().openTopCurvedRect))"},{"name":"ojob get","exec":"args.key=_$(args.key,\"key\").isString().default(\"res\");var a=$get(args.key);isArray(a)&&(a={_list:a});return a"},{"name":"ojob function","help":"Executes the provided function mapping any args to the function arguments using the odoc help available for the provided function. Note: accessing odoc might be slow on a first execution.\n\n  __key     (String)  The key string to retrieve previous results (defaults to 'res')\n  __fn      (String)  The function to execute\n  __path    (String)  If defined the args path for the function arguments to consider\n  __fnPath  (String)  If defined the args path where to set the function result\n","exec":"_$(args.__fn,\"__fn\").isString().$_();0>args.__fn.indexOf(\".\")&&(args.__fn=\"global.\"+args.__fn);var a=$fnM(args.__fn,isDef(args.__path)?$$(args).get(args.__path):args);isString(args.__fnPath)&&(a=$$({}).set(args.__fnPath,a));if(isString(args.__key))$set(args.__key,a);else return a"},{"name":"ojob output","help":"Prints the current arguments to the console. Optionally expects:\n\n   key      (String)  The key string to retrieve previous results (defaults to 'res')\n   path     (String)  A path string to a map/array over the results set on key. \n   format   (String)  The output format (e.g. see ow.oJob.output help)\n   internal (Boolean) If true it will display the internal oJob entries on the arguments (default false)\n","exec":"args.key=_$(args.key,\"key\").isString().default(\"res\");var a=$get(args.key);toBoolean(args.internal)||(delete a.objId,delete a.execid,delete a.id);isDef(args.format)&&(args.__format=args.format,delete args.format);isDef(args.path)&&(a=$$(a).get(args.path));isMap(a)&&isDef(a._list)&&(a=a._list);isMap(a)&&isDef(a._map)&&(a=a._map);ow.oJob.output(a,args)"},{"name":"ojob final report","to":"ojob report","type":"shutdown","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution) upon ojob termination\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n"},{"name":"ojob report","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution)\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n","exec":"ow.loadFormat();print(\"\\n\");var b=$ch(\"oJob::log\").getAll(),c=$from(b).notEquals(\"name\",\"ojob report\").notEquals(\"name\",\"ojob final report\").select(function(a){return{\"Job name\":a.name,Status:a.start?a.success?\"OK\":a.deps?a.error?\"NOT OK!\":\"executing\":\"failed deps\":\"not started\",\"# execs\":a.count,\"Total time\":ow.format.elapsedTime4ms(a.totalTime,{abrev:!0}),\"Avg time\":ow.format.elapsedTime4ms(a.avgTime,{abrev:!0}),\"Last exec\":0<a.log.length?ow.format.timeago($from(a.log).sort(\"-endTime\").at(0).endTime):\n\"n/a\"}});c.push({\"Job name\":\"TOTAL:\",Status:\"\",\"# execs\":\"\",\"Total time\":ow.format.elapsedTime4ms(now()-$from(b).sort(\"createDate\").at(0).createDate),\"Avg time\":\"\",\"Last exec\":\"\"});args.__format=_$(args.__format).default(\"table\");ow.oJob.output(c,args)"},{"name":"ojob options","help":"Adds new \"todo\" entries depending on the value of a provided args variable. Expects:\n\n  optionOn      (String)  The variable in args that will define which set of \"todo\"s will be added (trimmed)\n  lowerCase     (Boolean) Compare the switchOn in lower case (defaults to false)\n  todos.[value] (Map)     Map of \"todo\"s\n  default       (Array)   Default map of \"todo\"s\n\n  Example:\n\n    optionOn : mode\n    lowerCase: true\n    todos    :\n      mode1:\n      - Job 1\n      - Job 2\n      mode2:\n      - Job 2\n      - Job 3\n    default:\n    - Job 2\n","exec":"_$(args.switchOn,\"switchOn\").isString().$_();_$(args.todos,\"todos\").isMap().$_();args.lowerCase=_$(args.lowerCase,\"lowerCase\").isBoolean().default(!1);args.default=_$(args.default,\"default\").isArray().default([]);args.end=_$(args.end,\"end\").isArray().default([]);var b=String(args[args.switchOn]).trim();args.lowerCase&&(b=b.toLowerCase());var c=args,d=function(a){return isMap(a)?$job(a.name,merge(a.args,c)):$job(a,c)};isDef(args.todos[b])&&isArray(args.todos[b])?args.todos[b].forEach(function(a){return c=\nd(a)}):args.default.map(function(a){return c=d(a)})"},{"name":"ojob sec get","help":"This job will get a SBucket secret and map it to oJob's args:\n\n  - secOut      (string)  The args path to be mapped with the secret\n  - secKey      (string)  The SBucket key\n  - secRepo     (string)  The SBucket repository\n  - secBucket   (string)  The SBucket name\n  - secPass     (string)  The SBucket password\n  - secMainPass (string)  The SBucket repository password\n  - secDontAsk  (string)  Determine if passwords should be asked from the user (default=false)\n  - secIgnore   (boolean) If true will ignore errors of sec parameters not being provided (default=false)\n","exec":"args.secIgnore=_$(args.secIgnore,\"secIgnore\").isBoolean().default(!1);args.secOut=_$(args.secOut,\"secOut\").default(__);args.secIgnore||_$(args.secKey,\"secKey\").$_();args.secDontAsk=toBoolean(_$(args.secDontAsk,\"secDontAsk\").default(!1));!args.secDontAsk&&isDef(args.secKey)&&(args.secBucket=askDef(args.secBucket,\"Sec bucket: \"),isDef(args.secBucket)&&(args.secPass=askDef(args.secPass,\"Sec bucket '\"+args.secBucket+\"' pass: \",!0)),isDef(args.secRepo)&&(args.secMainPass=askDef(args.secMainPass,\n\"Sec repo '\"+args.secRepo+\"' pass: \",!0)));if(isDef(args.secKey)){var a=$sec(args.secRepo,args.secBucket,args.secPass,args.secMainPass).get(args.secKey);if(isUnDef(a))throw\"Couldn't retrieve secKey '\"+args.secKey+\"' from bucket '\"+args.secBucket+\"'!\";isDef(args.secOut)?$$(args).set(args.secOut,a):Object.keys(a).forEach(function(b){return $$(args).set(b,a[b])})}"},{"name":"ojob split to items","help":"Splits an args source into an array of maps (_list). Expects:\n\n  source    (String)  A object path to the string source to split\n  separator (String)  The separator for the source string (defaults to \\n)\n\nExample:\n\n  a source string with the value \"abc, xyz, 1\"\n  + separator = ','\n  transforms into:\n\n  - item: abc\n  - item: xyz\n  - item: 1\n","exec":"_$(args.source,\"source\").isString().$_();args.separator=_$(args.separator,\"separator\").isString().default(\"\\n\");ow.loadObj();args._list=String(ow.obj.getPath(args,args.source)).split(args.separator).map(function(a){return{item:a}})"},{"name":"ojob query","exec":"args.where=_$(args.where,\"where\").isArray().default([]);args.select=_$(args.select,\"select\").default(__);args.transform=_$(args.transform,\"transform\").isArray().default([]);args.selector=_$(args.selector,\"selector\").isMap().default(__);args.fromKey=_$(args.fromKey,\"fromKey\").isString().default(\"res\");var a=isDef(args.from)?$from($$($get(args.fromKey)).get(args.from)):$from($get(args.fromKey));args.where.forEach(function(c){return isString(c.cond)?a=a[c.cond].apply(a,c.args):c});args.transform.forEach(function(c){return isString(c.func)?\na=a[c.func].apply(a,c.args):c});var b;isString(args.select)&&(b=a.select(new Function(\"elem\",\"index\",\"array\",args.select)));isMap(args.select)&&(b=a.select(args.select));isUnDef(b)&&isMap(args.selector)&&(b=isString(args.selector.func)?$$({}).set(args.selector.func,a[args.selector.func].apply(a,args.selector.args)):b);isUnDef(b)&&isUnDef(args.select)&&(b=a.select());if(isString(args.key))$set(args.key,b);else return isArray(b)?{_list:b}:b"}]}