{"jobs":[{"name":"ojob debug","exec":"ow.loadFormat();print(\"\");cprint(ow.format.withSideLine(\"ARGS:\",__,\"YELLOW\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify(args),__,\"YELLOW\",__,ow.format.withSideLineThemes().openTopCurvedRect));cprint(ow.format.withSideLine(\"RES:\",__,\"YELLOW,BOLD\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify($get(\"res\")),__,\"YELLOW,BOLD\",__,ow.format.withSideLineThemes().openTopCurvedRect))"},{"name":"ojob job debug","help":"Provides an alternative to print based debug\n\n  job         (String)  The job to change to include debug\n  jobs        (Array)   The jobs to change to include debug\n  lineColor   (String)  The line color around the debug info\n  textColor   (String)  The text color around the debug info\n  theme       (String)  The withSideLineThemes theme to use\n  emoticons   (String)  If emoticons should be used or not\n  signs       (Map)     A custom list of emoticons (keys: checkpoint, assert and print)\n  includeTime (Boolean) If a time indication should be included\n\nExample:\n  # ----------------\n  - name: Sample job\n    exec: |\n      //@ Declaring array\n      var ar = [ 0, 1, 2, 3, 4, 5 ]\n\n      //@ Start cycle\n      var ii = 0;\n      while(ii < ar.length) {\n        print(\"II = \" + ii)\n        ii++\n        //# ii == 3\n      }\n      //@ End cycle\n      //? ii\n\n      //?s args\n      //?y args\n","exec":"isMap(void 0)&&(args=merge(void 0,args));args.job=_$(args.job,\"job\").isString().default(__);args.jobs=_$(args.jobs,\"jobs\").isArray().default([]);args.lineColor=_$(args.lineColor,\"lineColor\").isString().default(\"FG(220)\");args.textColor=_$(args.textColor,\"textColor\").isString().default(\"BG(230),BLACK\");args.lineError=_$(args.lineError,\"lineError\").isString().default(\"FG(220)\");args.textError=_$(args.textError,\"textError\").isString().default(\"BG(196),FG(255),BOLD\");args.theme=_$(args.theme,\n\"theme\").isString().default(\"doubleLineBothSides\");args.emoticons=_$(args.emoticons,\"emoticons\").isBoolean().default(!0);args.signs=_$(args.signs,\"signs\").isMap().default({checkpoint:127866,assert:128077,print:128270,error:128545,time:\"\\ud83d\\udd52\"});args.includeTime=_$(args.includeTime,\"includeTime\").isBoolean().default(!1);isDef(args.job)&&0==args.jobs.length&&args.jobs.push(args.job);if(isUnDef(getEnv(\"OJOB_DEBUG\"))||toBoolean(getEnv(\"OJOB_DEBUG\"))){ow.loadFormat();var h=ow.oJob.getJobsCh();0==\nargs.jobs.length&&(args.jobs=h.getKeys().filter(function(e){return\"ojob job debug\"!=e.name}).map(function(e){return e.name}));var k=!1;isDef(ow.loadDebug)&&(ow.loadDebug(),ow.debug.register(),k=!0);args.jobs.forEach(function(e){var d=h.get({name:e});if(k){if(isUnDef(d.lang)||isDef(d.lang)&&(\"oaf\"==d.lang||\"js\"==d.lang))d.exec=ow.debug.debug(d.exec,args,!0)}else{var f=function(c,a){var g=\";try{\";isDef(a)&&(g+=\"if(\"+a+\") {\");var l=args.includeTime?'(new Date()).toISOString() +\" | \" + ':\"\";g+=\"cprint(ow.format.withSideLine(\"+\nl+c+', __, \"'+args.lineColor+'\", \"'+args.textColor+'\", ow.format.withSideLineThemes().'+args.theme+\")) \";isDef(a)&&(g+=\"}\");return g+=\"}catch(__e_debug){cprint(ow.format.withSideLine(\"+l+\"' \"+b.error+\" ' + String(__e_debug), __, \\\"\"+args.lineError+'\", \"'+args.textError+'\", ow.format.withSideLineThemes().'+args.theme+\"))};\"};if(args.emoticons){var b=args.signs;isNumber(b.checkpoint)&&(b.checkpoint=ow.format.string.unicode(b.checkpoint));isNumber(b.assert)&&(b.assert=ow.format.string.unicode(b.assert));\nisNumber(b.print)&&(b.print=ow.format.string.unicode(b.print));isNumber(b.error)&&(b.error=ow.format.string.unicode(b.error))}b.checkpoint=_$(b.checkpoint).default(\"@\");b.assert=_$(b.assert).default(\"#\");b.print=_$(b.print).default(\"?\");b.error=_$(b.error).default(\"!\");d.exec=d.exec.split(\"\\n\").map(function(c){var a=c.trim().match(/\\/\\/@ (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/@ (.+)$/,f('\" '+b.checkpoint+\" \"+a.replace(/\"/g,'\\\\\"')+'\"')));a=c.trim().match(/\\/\\/# (.+)$/);isArray(a)&&(a=a[1],c=\nc.replace(/\\/\\/# (.+)$/,f('\" '+b.assert+\" \"+a+'\"',a)));a=c.trim().match(/\\/\\/\\? (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\? (.+)$/,f('\" '+b.print+\" \"+a+' = \" + stringify('+a+') + \"\"')));a=c.trim().match(/\\/\\/\\?s (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\?s (.+)$/,f('\" '+b.print+\" \"+a+' = \" + af.toSLON('+a+') + \"\"')));a=c.trim().match(/\\/\\/\\?y (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\?y (.+)$/,f('\" '+b.print+\" \"+a+' = \" + af.toYAML('+a+') + \"\"')));return c}).join(\"\\n\")}h.set({name:e},\nd)})}"},{"name":"ojob get","help":"Retrieves a specific map key (or path) using $get\n\n  __key  (String)  Map key or path (key is also checked for compatibility)\n","check":{"in":{"__key":"isString.default(\"res\")"}},"exec":"isUnDef(args.__key)&&isDef(args.key)&&(args.__key=args.key);var a=$get(args.__key);isArray(a)&&(a={_list:a});return a"},{"name":"ojob set","help":"Sets a \"key\" with the current value on a \"path\" using $set\n\n  __key  (String)  Map key\n  __path (String)  A key or path to a value from the current args\n","check":{"in":{"__key":"isString.default(\"res\")","__path":"isString"}},"exec":"var a=$path(args,args.__path);isDef(a)&&$set(args.__key,a)"},{"name":"ojob file get","help":"Retrieves a specific map key (or path) from an YAML or JSON file provided.\n\n  __file  (String)  The file path to an YAML or JSON file\n  __key   (String)  Map key or path on the file contents\n  __cache (Boolean) If false it won't cache the file contents (default: true)\n  __ttl   (Number)  If cache is enabled lets you definea ttl\n  __out   (String)  The path on args to set the map key/path contents\n","exec":"args.__file=_$(args.__file,\"__file\").isString().$_();args.__key=_$(args.__key,\"__key\").isString().default(\"res\");args.__cache=toBoolean(_$(args.__cache,\"__cache\").default(\"true\"));args.__ttl=_$(args.__ttl,\"__ttl\").isNumber().default(__);args.__out=_$(args.__out,\"__out\").isString().default(__);if(args.__cache){var c=$cache(\"__ojob_file_get\");isDef(args.__ttl)&&(c=c.ttl(args.__ttl));c=c.fn(function(a){return isDef(a.file)?a.file.endsWith(\".json\")?io.readFileJSON(a.file):/\\.ya?ml$/.test(a.file)?\nio.readFileYAML(a.file):{error:\"Not an yaml, yml or json file.\"}:{}}).create();var b=c.get({file:args.__file})}else b=args.__file.endsWith(\".json\")?io.readFileJSON(args.__file):/\\.ya?ml$/.test(args.__file)?io.readFileYAML(args.__file):{error:\"Not an yaml, yml or json file.\"};b=$path(b,args.__key);isDef(args.__out)?$$(args).set(args.__out,b):Object.keys(b).forEach(function(a){return $$(args).set(a,b[a])})"},{"name":"ojob function","help":"Executes the provided function mapping any args to the function arguments using the odoc help available for the provided function. Note: accessing odoc might be slow on a first execution.\n\n  __key     (String)  The key string to retrieve previous results (defaults to 'res')\n  __fn      (String)  The function to execute\n  __path    (String)  If defined the args path for the function arguments to consider\n  __fnPath  (String)  If defined the args path where to set the function result\n","exec":"_$(args.__fn,\"__fn\").isString().$_();0>args.__fn.indexOf(\".\")&&(args.__fn=\"global.\"+args.__fn);var a=$fnM(args.__fn,isDef(args.__path)?$path(args,args.__path):args);isString(args.__fnPath)&&(a=$$({}).set(args.__fnPath,a));if(isString(args.__key))$set(args.__key,a);else return a"},{"name":"ojob output","help":"Prints the current arguments to the console. Optionally expects:\n\n  __key      (String)  The key string to retrieve previous results (defaults to 'res')\n  __path     (String)  A path string to a map/array over the results set on key. \n  __format   (String)  The output format (e.g. see ow.oJob.output help)\n  __title    (String)  Encapsulates the output map/array with a title key.\n  __internal (Boolean) If true it will display the internal oJob entries on the arguments (default false)\n","exec":"isUnDef(args.__key)&&isDef(args.key)&&(args.__key=args.key);isUnDef(args.__path)&&isDef(args.path)&&(args.__path=args.path);isUnDef(args.__format)&&isDef(args.format)&&(args.__format=args.format);isUnDef(args.__title)&&isDef(args.title)&&(args.__title=args.title);isUnDef(args.__internal)&&isDef(args.internal)&&(args.__internal=args.internal);args.__key=_$(args.__key,\"key\").isString().default(\"res\");var a=\"args\"==args.__key?args:$get(args.__key);isUnDef(a)&&(a=args);isDef(a)&&!toBoolean(args.__internal)&&\n(delete a.objId,delete a.execid,delete a.id);isDef(args.format)&&(args.__format=args.format,delete args.format);isDef(args.__path)&&(a=$path(a,args.__path),delete args.__path);isMap(a)&&isDef(a._list)&&(a=a._list);isMap(a)&&isDef(a._map)&&(a=a._map);if(isDef(args.__title)){var b={};b[args.__title]=a;ow.oJob.output(b,args)}else ow.oJob.output(a,args)"},{"name":"ojob final report","to":"ojob report","type":"shutdown","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution) upon ojob termination\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n"},{"name":"ojob report","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution)\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n","exec":"ow.loadFormat();print(\"\\n\");var b=$ch(\"oJob::log\").getAll(),c=$from(b).notEquals(\"name\",\"ojob report\").notEquals(\"name\",\"ojob final report\").select(function(a){return{\"Job name\":a.name,Status:a.start?a.success?\"OK\":a.deps?a.error?\"NOT OK!\":\"executing\":\"failed deps\":\"not started\",\"# execs\":a.count,\"Total time\":ow.format.elapsedTime4ms(a.totalTime,{abrev:!0}),\"Avg time\":ow.format.elapsedTime4ms(a.avgTime,{abrev:!0}),\"Last exec\":0<a.log.length?ow.format.timeago($from(a.log).sort(\"-endTime\").at(0).endTime):\n\"n/a\"}});c.push({\"Job name\":\"TOTAL:\",Status:\"\",\"# execs\":\"\",\"Total time\":ow.format.elapsedTime4ms(now()-$from(b).sort(\"createDate\").at(0).createDate),\"Avg time\":\"\",\"Last exec\":\"\"});args.__format=_$(args.__format).default(\"table\");ow.oJob.output(c,args)"},{"name":"ojob options","help":"Adds new \"todo\" entries depending on the value of a provided args variable. Expects:\n\n  __optionOn      (String)  The variable in args that will define which set of \"todo\"s will be added (trimmed)\n  __lowerCase     (Boolean) Compare the optionOn in lower case (defaults to false)\n  __upperCase     (Boolean) Compare the optionOn in upper case (defaults to false)\n  __todos.[value] (Map)     Map of \"todo\"s\n  __default       (Array)   Default array of \"todo\"s\n  __async         (Boolean) If true, run the todos in async mode\n\n  Example:\n\n    __optionOn : mode\n    __lowerCase: true\n    __todos    :\n      mode1:\n      - Job 1\n      - Job 2\n      mode2:\n      - Job 2\n      - Job 3\n    __default:\n    - Job 2\n","exec":"isUnDef(args.__optionOn)&&isDef(args.optionOn)&&(args.__optionOn=args.optionOn);isUnDef(args.__todos)&&isDef(args.todos)&&(args.__todos=args.todos);isUnDef(args.__lowerCase)&&isDef(args.lowerCase)&&(args.__lowerCase=args.lowerCase);isUnDef(args.__upperCase)&&isDef(args.upperCase)&&(args.__upperCase=args.upperCase);isUnDef(args.__default)&&isDef(args.default)&&(args.__default=args.default);_$(args.__optionOn,\"optionOn\").isString().$_();_$(args.__todos,\"todos\").isMap().$_();args.__lowerCase=\n_$(args.__lowerCase,\"lowerCase\").isBoolean().default(!1);args.__upperCase=_$(args.__upperCase,\"upperCase\").isBoolean().default(!1);args.__default=_$(args.__default,\"default\").default([]);args.__async=_$(args.__async,\"async\").isBoolean().default(!1);isString(args.__default)&&(args.__default=[args.__default]);var a=String(args[args.__optionOn]).trim();args.__lowerCase&&(a=a.toLowerCase());args.__upperCase&&(a=a.toUpperCase());var d={},c=clone(args);delete c.__default;delete c.__lowerCase;delete c.__upperCase;\ndelete c.__todos;delete c.__optionOn;delete c.__async;var e=function(b){return isMap(b)?$job(b.name,merge(b.args,merge(c,d))):$job(b,merge(c,d))};isDef(args.__todos[a])&&isString(args.__todos[a])&&(args.__todos[a]=[args.__todos[a]]);isDef(args.__todos[a])&&isArray(args.__todos[a])?args.__todos[a].forEach(function(b){args.__async?$do(function(){return d=e(b)}):d=e(b)}):args.__default.map(function(b){args.__async?$do(function(){return d=e(b)}):d=e(b)})"},{"name":"ojob sec get","help":"This job will get a SBucket secret and map it to oJob's args:\n\n  - secIn               (String)  The args path where all the remaining sec arguments should be read from (defaults to no path)\n  - [secIn].secOut      (string)  The args path to be mapped with the secret (defaults to secIn)\n  - [secIn].secKey      (string)  The SBucket key\n  - [secIn].secRepo     (string)  The SBucket repository\n  - [secIn].secBucket   (string)  The SBucket name\n  - [secIn].secPass     (string)  The SBucket password\n  - [secIn].secMainPass (string)  The SBucket repository password\n  - [secIn].secFile     (string)  Optional provide a specific sbucket file\n  - [secIn].secDontAsk  (string)  Determine if passwords should be asked from the user (default=false)\n  - [secIn].secIgnore   (boolean) If true will ignore errors of sec parameters not being provided (default=false)\n","exec":"ow.loadSec();var a=_$(args.secIn,\"secIn\").isString().default(\"\");\"\"!=a&&(a+=\".\");var g=_$($$(args).get(a+\"secIgnore\"),\"secIgnore\").isBoolean().default(!1),e=_$($$(args).get(a+\"secOut\"),\"secOut\").default(\"\"!=a?a.replace(/\\.$/,\"\"):__);g||_$($$(args).get(a+\"secKey\"),\"secKey\").$_();g=toBoolean(_$($$(args).get(a+\"secDontAsk\"),\"secDontAsk\").default(!1));var f=_$($$(args).get(a+\"secKey\"),\"secKey\").default(__),b=_$($$(args).get(a+\"secBucket\"),\"secBucket\").default(__),c=_$($$(args).get(a+\"secPass\"),\n\"secPass\").default(__),k=_$($$(args).get(a+\"secFile\"),\"secFile\").default(__),h=_$($$(args).get(a+\"secRepo\"),\"secRepo\").default(__);a=_$($$(args).get(a+\"secMainPass\"),\"secMainPass\").default(__);!g&&isDef(f)&&(b=askDef(b,\"Sec bucket: \"),isDef(b)&&isUnDef(k)&&(c=askDef(c,\"Sec bucket '\"+b+\"' pass: \",!0)),isDef(h)&&(a=askDef(a,\"Sec repo '\"+h+\"' pass: \",!0)));isUnDef(c)&&isDef(args.secPass)&&(c=args.secPass);isUnDef(a)&&isDef(args.secMainPass)&&(a=args.secMainPass);if(isDef(f)){var d=$sec(h,b,c,a,k).get(f);\nif(isUnDef(d))throw\"Couldn't retrieve secKey '\"+f+\"' from bucket '\"+b+\"'!\";isDef(e)&&0<e.length?(a=$$(args).get(e),$$(args).set(e,isDef(a)?merge(a,d):d)):Object.keys(d).forEach(function(l){return $$(args).set(l,d[l])})}"},{"name":"ojob split to items","help":"Splits an args source into an array of maps (_list). Expects:\n\n  source    (String)  A object path to the string source to split\n  separator (String)  The separator for the source string (defaults to \\n)\n\nExample:\n\n  a source string with the value \"abc, xyz, 1\"\n  + separator = ','\n  transforms into:\n\n  - item: abc\n  - item: xyz\n  - item: 1\n","exec":"_$(args.source,\"source\").isString().$_();args.separator=_$(args.separator,\"separator\").isString().default(\"\\n\");ow.loadObj();args._list=String(ow.obj.getPath(args,args.source)).split(args.separator).map(function(a){return{item:a}})"},{"name":"ojob query","help":"Performs a query (using ow.obj.filter) to the existing args.\n\n  __query   (Map)     The query map for ow.obj.filter\n  __from    (String)  The path to the args key to perform the query\n  __to      (String)  The path to where the results should be stores\n  __key     (String)  If __from and __to not provided defaults to $get/$set on the provided key\n","exec":"isUnDef(args.__from)&&isDef(args.from)&&(args.__from=args.from);isUnDef(args.__key)&&isDef(args.key)&&(args.__key=args.key);isUnDef(args.__query)&&(args.__query={});isUnDef(args.__from)&&isUnDef(args.__key)&&(args.__key=\"res\");var a=isDef(args.__from)?$path(args,args.__from):$get(args.__key);ow.loadObj();a=ow.obj.filter(a,args.__query);if(isUnDef(args.__from)&&isDef(args.__key))$set(args.__key,a);else if(isDef(args.__to))$$(args).set(args.__to,a);else if(isDef(args.__from))$$(args).set(args.__from,\na);else return isArray(a)?{_list:a}:a"},{"name":"ojob set envs","help":"Sets job args based on environment variables. Expects:\n\n  envs  (Map) A map where each key corresponds to an environment variable and the value to the args path where it should be placed\n","exec":"_$(args.envs,\"envs\").isMap().$_();Object.keys(args.envs).forEach(function(a){var b=args.envs[a];a=getEnv(a);isDef(a)&&!isNull(a)&&$$(args).set(String(b),String(a))})"},{"name":"ojob if","help":"If the provided \"condition\" is evaluated as true it will execute the \"then\" jobs otherwise it will execute the \"else\" jobs\n\n  __condition  (String)       An OpenAF code condition with templating functionality\n  __then       (String/List)  One job or a list of jobs to execute if the \"condition\" is true\n  __else       (String/List)  One job or a list of jobs to execute if the \"condition\" is false\n  __debug      (Boolean)      Will log the original condition and the parsed condition for debug proposes\n","check":{"in":{"__condition":"isString","__then":"default([])","__else":"default([])","__debug":"toBoolean.isBoolean.default(false)"}},"exec":"isString(args.__then)&&(args.__then=[args.__then]);isString(args.__else)&&(args.__else=[args.__else]);var a=String(args.__condition);delete args.__condition;var e=clone(args.__then);delete args.__then;var f=clone(args.__else);delete args.__else;var d=!!args.__debug;delete args.__debug;var c=templify(a,args).replace(/\\n/g,\"\");d&&log(\" DEBUG | \"+af.toSLON({origCondition:\" \"+a+\" \",parsedCondition:\" \"+c+\" \"}));c=af.eval(c);d&&log(\" DEBUG | \"+af.toSLON({origCondition:\" \"+a+\" \",result:c}));\na=function(b){isString(b)&&$job(b,args);isMap(b)&&isDef(b.name)&&$job(b.name,b.args)};c?e.forEach(a):f.forEach(a)"},{"name":"ojob repeat","help":"Repeats sequentially, for a specific number of \"times\", the provided list of \"jobs\" (one or more)\n\n  __times  (Number)       The number of times to repeat the provided list of jobs\n  __jobs   (String/List)  One job or a list of jobs to execute each time\n","check":{"in":{"__times":"toNumber.isNumber"}},"exec":"if(!isString(args.__jobs)&&!isArray(args.__jobs))throw\"The provided 'jobs' need to be one or a list of jobs.\";if(isUnDef(args.__jobs))throw\"No 'jobs' list was provided.\";isString(args.__jobs)&&(args.__jobs=[args.__jobs]);var b=clone(args.__jobs);delete args.__jobs;var c=Number(args.__times);delete args.__times;for(var a=0;a<c;a++)b.forEach(function(d){return $job(d,args)})"},{"name":"ojob repeat with each","help":"Repeats the configured \"jobs\" (one or more jobs) sequentially for each element of the provided \"key\" list.\n\n  __key  (String)       The key or path for an existing list in args\n  __jobs (String/List)  One job or a list of jobs to execute each time\n","check":{"in":{"__key":"isString"}},"exec":"if(!isString(args.__jobs)&&!isArray(args.__jobs))throw\"The provided 'jobs' need to be one or a list of jobs.\";if(isUnDef(args.__jobs))throw\"No 'jobs' list was provided.\";var a=String(args.__key);delete args.__key;isString(args.__jobs)&&(args.__jobs=[args.__jobs]);var c=clone(args.__jobs);delete args.__jobs;var b=$$(args).get(a);if(!isArray(b))throw\"The key/path '\"+a+\"' is not an array/list.\";b.forEach(function(d){c.forEach(function(e){return $job(e,merge(args,d))})})"},{"name":"ojob job","help":"Provides a way to organize idempotent jobs. One or more \"checks\" jobs will be called to determine an args._action.\nInitially the args._action is set to \"none\". If the \"checks\" jobs determine an action it will call the corresponding\njobs on \"actions\" jobs. If \"_go=true\" is not provided, instead of running, it will only return a plan of actions. \nFor example:\n\n   - name: Write Hello World\n     to  : ojob job\n     args:\n       _checks : Check Hello World\n       _actions:\n         create   : Create Hello World\n         overwrite: Overwrite Hello World\n         delete   : Delete Hello World\n","check":{"in":{"_go":"toBoolean.isBoolean.default(false)"}},"exec":"isString(args._checks)&&(args._checks=[args._checks]);isString(args._actions)&&(args._actions={none:args._actions});var c=function(a){a=clone(a);delete a._checks;delete a._actions;return a};args._action=\"none\";args._checks.forEach(function(a){isString(a)?(a=$job(a,c(args)),isMap(a)&&isString(a._action)&&(args._action=a._action)):logErr(\"oJob Job 'checks' must be job names\")});$ch(\"_ojob_plan\").create();$ch(\"_ojob_plan\").get({name:job.name});var d=[];if(isDef(args._actions[args._action])){var b;\nisArray(args._actions[args._action])&&(b=args._actions[args._action]);isString(args._actions[args._action])&&(b=[args._actions[args._action]]);b.forEach(function(a){args._go?$job(a,c(args)):d.push(a)})}$ch(\"_ojob_plan\").set({name:job.name},{name:job.name,action:args._action,\"go?\":args._go,plan:d})"},{"name":"ojob job report","help":"Outputs a job jobs report (e.g. job name, action and plan)\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n","exec":"ow.oJob.output($ch(\"_ojob_plan\").getAll(),{__format:_$(args.__format).default(\"table\")})"},{"name":"ojob job final report","type":"shutdown","to":"ojob job report","help":"Outputs a job jobs report (e.g. job name, action and plan) upon ojob termination\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n"},{"name":"ojob set state","help":"Changes the current state. Expects:\n\n  __state  (String) The state to change to (to execute todo.when)\n","exec":"isUnDef(args.__state)&&isDef(args.state)&&(args.__state=args.state);_$(args.state,\"state\").isString().$_();ow.oJob.setState(args.state)"},{"name":"ojob get state","help":"Gets the current state into args.state.\n","exec":"args.state=ow.oJob.getState()"},{"name":"ojob state","help":"Changes the current state depending on the value of a provided args variable. Expects:\n\n  stateOn     (String)  The variable in args that will define the current global set (to execute todo.when)\n  lowerCase   (Boolean) Compare the stateOn in lower case (defaults to false)\n  upperCase   (Boolean) Compare the stateOn in upper case (defaults to false)\n  validStates (Array)   An array of valid states to change to. If not included the default will be choosen (or none).\n  default     (Array)   Default map of \"todo\"s\n\n  Example:\n\n    stateOn  : mode\n    lowerCase: true\n    default  : Help\n","exec":"args.stateOn=_$(args.stateOn,\"stateOn\").default(\"state\");args.lowerCase=_$(args.lowerCase,\"lowerCase\").isBoolean().default(!1);args.upperCase=_$(args.upperCase,\"upperCase\").isBoolean().default(!1);args.state=_$(args[args.stateOn],args.stateOn).default(args.default);args.lowerCase&&isString(args.state)&&(args.state=args.state.toLowerCase());args.upperCase&&isString(args.state)&&(args.state=args.state.toUpperCase());isArray(args.validStates)&&0>args.validStates.indexOf(args.state)&&(isDef(args.default)?\nargs.state=args.default:args.state=__);isString(args.state)&&isDef(ow.oJob.setState)&&ow.oJob.setState(args.state)"}]}