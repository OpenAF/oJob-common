{"jobs":[{"name":"ojob debug","exec":"ow.loadFormat();print(\"\");cprint(ow.format.withSideLine(\"ARGS:\",__,\"YELLOW\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify(args),__,\"YELLOW\",__,ow.format.withSideLineThemes().openTopCurvedRect));cprint(ow.format.withSideLine(\"RES:\",__,\"YELLOW,BOLD\",\"BOLD\",ow.format.withSideLineThemes().openBottomCurvedRect));cprint(ow.format.withSideLine(colorify($get(\"res\")),__,\"YELLOW,BOLD\",__,ow.format.withSideLineThemes().openTopCurvedRect))"},{"name":"ojob job debug","help":"Provides an alternative to print based debug\n\n  job         (String)  The job to change to include debug\n  jobs        (Array)   The jobs to change to include debug\n  lineColor   (String)  The line color around the debug info\n  textColor   (String)  The text color around the debug info\n  theme       (String)  The withSideLineThemes theme to use\n  emoticons   (String)  If emoticons should be used or not\n  signs       (Map)     A custom list of emoticons (keys: checkpoint, assert and print)\n  includeTime (Boolean) If a time indication should be included\n\nExample:\n  # ----------------\n  - name: Sample job\n    exec: |\n      //@ Declaring array\n      var ar = [ 0, 1, 2, 3, 4, 5 ]\n\n      //@ Start cycle\n      var ii = 0;\n      while(ii < ar.length) {\n        print(\"II = \" + ii)\n        ii++\n        //# ii == 3\n      }\n      //@ End cycle\n      //? ii\n\n      //?s args\n      //?y args\n","exec":"isMap(void 0)&&(args=merge(void 0,args));args.job=_$(args.job,\"job\").isString().default(__);args.jobs=_$(args.jobs,\"jobs\").isArray().default([]);args.lineColor=_$(args.lineColor,\"lineColor\").isString().default(\"FG(220)\");args.textColor=_$(args.textColor,\"textColor\").isString().default(\"BG(230),BLACK\");args.lineError=_$(args.lineError,\"lineError\").isString().default(\"FG(220)\");args.textError=_$(args.textError,\"textError\").isString().default(\"BG(196),FG(255),BOLD\");args.theme=_$(args.theme,\n\"theme\").isString().default(\"doubleLineBothSides\");args.emoticons=_$(args.emoticons,\"emoticons\").isBoolean().default(!0);args.signs=_$(args.signs,\"signs\").isMap().default({checkpoint:127866,assert:128077,print:128270,error:128545,time:\"\\ud83d\\udd52\"});args.includeTime=_$(args.includeTime,\"includeTime\").isBoolean().default(!1);isDef(args.job)&&0==args.jobs.length&&args.jobs.push(args.job);if(isUnDef(getEnv(\"OJOB_DEBUG\"))||toBoolean(getEnv(\"OJOB_DEBUG\"))){ow.loadFormat();var h=ow.oJob.getJobsCh();0==\nargs.jobs.length&&(args.jobs=h.getKeys().filter(function(e){return\"ojob job debug\"!=e.name}).map(function(e){return e.name}));var k=!1;isDef(ow.loadDebug)&&(ow.loadDebug(),ow.debug.register(),k=!0);args.jobs.forEach(function(e){var d=h.get({name:e});if(k){if(isUnDef(d.lang)||isDef(d.lang)&&(\"oaf\"==d.lang||\"js\"==d.lang))d.exec=ow.debug.debug(d.exec,args,!0)}else{var f=function(c,a){var g=\";try{\";isDef(a)&&(g+=\"if(\"+a+\") {\");var l=args.includeTime?'(new Date()).toISOString() +\" | \" + ':\"\";g+=\"cprint(ow.format.withSideLine(\"+\nl+c+', __, \"'+args.lineColor+'\", \"'+args.textColor+'\", ow.format.withSideLineThemes().'+args.theme+\")) \";isDef(a)&&(g+=\"}\");return g+=\"}catch(__e_debug){cprint(ow.format.withSideLine(\"+l+\"' \"+b.error+\" ' + String(__e_debug), __, \\\"\"+args.lineError+'\", \"'+args.textError+'\", ow.format.withSideLineThemes().'+args.theme+\"))};\"};if(args.emoticons){var b=args.signs;isNumber(b.checkpoint)&&(b.checkpoint=ow.format.string.unicode(b.checkpoint));isNumber(b.assert)&&(b.assert=ow.format.string.unicode(b.assert));\nisNumber(b.print)&&(b.print=ow.format.string.unicode(b.print));isNumber(b.error)&&(b.error=ow.format.string.unicode(b.error))}b.checkpoint=_$(b.checkpoint).default(\"@\");b.assert=_$(b.assert).default(\"#\");b.print=_$(b.print).default(\"?\");b.error=_$(b.error).default(\"!\");d.exec=d.exec.split(\"\\n\").map(function(c){var a=c.trim().match(/\\/\\/@ (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/@ (.+)$/,f('\" '+b.checkpoint+\" \"+a.replace(/\"/g,'\\\\\"')+'\"')));a=c.trim().match(/\\/\\/# (.+)$/);isArray(a)&&(a=a[1],c=\nc.replace(/\\/\\/# (.+)$/,f('\" '+b.assert+\" \"+a+'\"',a)));a=c.trim().match(/\\/\\/\\? (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\? (.+)$/,f('\" '+b.print+\" \"+a+' = \" + stringify('+a+') + \"\"')));a=c.trim().match(/\\/\\/\\?s (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\?s (.+)$/,f('\" '+b.print+\" \"+a+' = \" + af.toSLON('+a+') + \"\"')));a=c.trim().match(/\\/\\/\\?y (.+)$/);isArray(a)&&(a=a[1],c=c.replace(/\\/\\/\\?y (.+)$/,f('\" '+b.print+\" \"+a+' = \" + af.toYAML('+a+') + \"\"')));return c}).join(\"\\n\")}h.set({name:e},\nd)})}"},{"name":"ojob get","help":"Retrieves a specific map key (or path) using $get\n\n  key  (String)  Map key or path\n","exec":"args.key=_$(args.key,\"key\").isString().default(\"res\");var a=$get(args.key);isArray(a)&&(a={_list:a});return a"},{"name":"ojob file get","help":"Retrieves a specific map key (or path) from an YAML or JSON file provided.\n\n  __file  (String)  The file path to an YAML or JSON file\n  __key   (String)  Map key or path on the file contents\n  __cache (Boolean) If false it won't cache the file contents (default: true)\n  __ttl   (Number)  If cache is enabled lets you definea ttl\n  __out   (String)  The path on args to set the map key/path contents\n","exec":"args.__file=_$(args.__file,\"__file\").isString().$_();args.__key=_$(args.__key,\"__key\").isString().default(\"res\");args.__cache=toBoolean(_$(args.__cache,\"__cache\").default(\"true\"));args.__ttl=_$(args.__ttl,\"__ttl\").isNumber().default(__);args.__out=_$(args.__out,\"__out\").isString().default(__);if(args.__cache){var c=$cache(\"__ojob_file_get\");isDef(args.__ttl)&&(c=c.ttl(args.__ttl));c=c.fn(function(a){return isDef(a.file)?a.file.endsWith(\".json\")?io.readFileJSON(a.file):/\\.ya?ml$/.test(a.file)?\nio.readFileYAML(a.file):{error:\"Not an yaml, yml or json file.\"}:{}}).create();var b=c.get({file:args.__file})}else b=args.__file.endsWith(\".json\")?io.readFileJSON(args.__file):/\\.ya?ml$/.test(args.__file)?io.readFileYAML(args.__file):{error:\"Not an yaml, yml or json file.\"};b=$$(b).get(args.__key);isDef(args.__out)?$$(args).set(args.__out,b):Object.keys(b).forEach(function(a){return $$(args).set(a,b[a])})"},{"name":"ojob function","help":"Executes the provided function mapping any args to the function arguments using the odoc help available for the provided function. Note: accessing odoc might be slow on a first execution.\n\n  __key     (String)  The key string to retrieve previous results (defaults to 'res')\n  __fn      (String)  The function to execute\n  __path    (String)  If defined the args path for the function arguments to consider\n  __fnPath  (String)  If defined the args path where to set the function result\n","exec":"_$(args.__fn,\"__fn\").isString().$_();0>args.__fn.indexOf(\".\")&&(args.__fn=\"global.\"+args.__fn);var a=$fnM(args.__fn,isDef(args.__path)?$$(args).get(args.__path):args);isString(args.__fnPath)&&(a=$$({}).set(args.__fnPath,a));if(isString(args.__key))$set(args.__key,a);else return a"},{"name":"ojob output","help":"Prints the current arguments to the console. Optionally expects:\n\n   key      (String)  The key string to retrieve previous results (defaults to 'res')\n   path     (String)  A path string to a map/array over the results set on key. \n   format   (String)  The output format (e.g. see ow.oJob.output help)\n   title    (String)  Encapsulates the output map/array with a title key.\n   internal (Boolean) If true it will display the internal oJob entries on the arguments (default false)\n","exec":"args.key=_$(args.key,\"key\").isString().default(\"res\");var a=$get(args.key);isUnDef(a)&&(a=args);isDef(a)&&!toBoolean(args.internal)&&(delete a.objId,delete a.execid,delete a.id);isDef(args.format)&&(args.__format=args.format,delete args.format);isDef(args.path)&&(a=$$(a).get(args.path));isMap(a)&&isDef(a._list)&&(a=a._list);isMap(a)&&isDef(a._map)&&(a=a._map);if(isDef(args.title)){var b={};b[args.title]=a;ow.oJob.output(b,args)}else ow.oJob.output(a,args)"},{"name":"ojob final report","to":"ojob report","type":"shutdown","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution) upon ojob termination\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n"},{"name":"ojob report","help":"Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution)\n\n  __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format\n","exec":"ow.loadFormat();print(\"\\n\");var b=$ch(\"oJob::log\").getAll(),c=$from(b).notEquals(\"name\",\"ojob report\").notEquals(\"name\",\"ojob final report\").select(function(a){return{\"Job name\":a.name,Status:a.start?a.success?\"OK\":a.deps?a.error?\"NOT OK!\":\"executing\":\"failed deps\":\"not started\",\"# execs\":a.count,\"Total time\":ow.format.elapsedTime4ms(a.totalTime,{abrev:!0}),\"Avg time\":ow.format.elapsedTime4ms(a.avgTime,{abrev:!0}),\"Last exec\":0<a.log.length?ow.format.timeago($from(a.log).sort(\"-endTime\").at(0).endTime):\n\"n/a\"}});c.push({\"Job name\":\"TOTAL:\",Status:\"\",\"# execs\":\"\",\"Total time\":ow.format.elapsedTime4ms(now()-$from(b).sort(\"createDate\").at(0).createDate),\"Avg time\":\"\",\"Last exec\":\"\"});args.__format=_$(args.__format).default(\"table\");ow.oJob.output(c,args)"},{"name":"ojob options","help":"Adds new \"todo\" entries depending on the value of a provided args variable. Expects:\n\n  optionOn      (String)  The variable in args that will define which set of \"todo\"s will be added (trimmed)\n  lowerCase     (Boolean) Compare the switchOn in lower case (defaults to false)\n  todos.[value] (Map)     Map of \"todo\"s\n  default       (Array)   Default map of \"todo\"s\n\n  Example:\n\n    optionOn : mode\n    lowerCase: true\n    todos    :\n      mode1:\n      - Job 1\n      - Job 2\n      mode2:\n      - Job 2\n      - Job 3\n    default:\n    - Job 2\n","exec":"_$(args.optionOn,\"optionOn\").isString().$_();_$(args.todos,\"todos\").isMap().$_();args.lowerCase=_$(args.lowerCase,\"lowerCase\").isBoolean().default(!1);args.default=_$(args.default,\"default\").isArray().default([]);args.end=_$(args.end,\"end\").isArray().default([]);var b=String(args[args.optionOn]).trim();args.lowerCase&&(b=b.toLowerCase());var c=args,d=function(a){return isMap(a)?$job(a.name,merge(a.args,c)):$job(a,c)};isDef(args.todos[b])&&isArray(args.todos[b])?args.todos[b].forEach(function(a){return c=\nd(a)}):args.default.map(function(a){return c=d(a)})"},{"name":"ojob sec get","help":"This job will get a SBucket secret and map it to oJob's args:\n\n  - secIn               (String)  The args path where all the remaining sec arguments should be read from (defaults to no path)\n  - [secIn].secOut      (string)  The args path to be mapped with the secret (defaults to secIn)\n  - [secIn].secKey      (string)  The SBucket key\n  - [secIn].secRepo     (string)  The SBucket repository\n  - [secIn].secBucket   (string)  The SBucket name\n  - [secIn].secPass     (string)  The SBucket password\n  - [secIn].secMainPass (string)  The SBucket repository password\n  - [secIn].secFile     (string)  Optional provide a specific sbucket file\n  - [secIn].secDontAsk  (string)  Determine if passwords should be asked from the user (default=false)\n  - [secIn].secIgnore   (boolean) If true will ignore errors of sec parameters not being provided (default=false)\n","exec":"var a=_$(args.secIn,\"secIn\").isString().default(\"\");\"\"!=a&&(a+=\".\");var g=_$($$(args).get(a+\"secIgnore\"),\"secIgnore\").isBoolean().default(!1),e=_$($$(args).get(a+\"secOut\"),\"secOut\").default(\"\"!=a?a.replace(/\\.$/,\"\"):__);g||_$($$(args).get(a+\"secKey\"),\"secKey\").$_();g=toBoolean(_$($$(args).get(a+\"secDontAsk\"),\"secDontAsk\").default(!1));var f=_$($$(args).get(a+\"secKey\"),\"secKey\").default(__),b=_$($$(args).get(a+\"secBucket\"),\"secBucket\").default(__),c=_$($$(args).get(a+\"secPass\"),\"secPass\").default(__),\nk=_$($$(args).get(a+\"secFile\"),\"secFile\").default(__),h=_$($$(args).get(a+\"secRepo\"),\"secRepo\").default(__);a=_$($$(args).get(a+\"secMainPass\"),\"secMainPass\").default(__);!g&&isDef(f)&&(b=askDef(b,\"Sec bucket: \"),isDef(b)&&isUnDef(k)&&(c=askDef(c,\"Sec bucket '\"+b+\"' pass: \",!0)),isDef(h)&&(a=askDef(a,\"Sec repo '\"+h+\"' pass: \",!0)));isUnDef(c)&&isDef(args.secPass)&&(c=args.secPass);isUnDef(a)&&isDef(args.secMainPass)&&(a=args.secMainPass);if(isDef(f)){var d=$sec(h,b,c,a,k).get(f);if(isUnDef(d))throw\"Couldn't retrieve secKey '\"+\nf+\"' from bucket '\"+b+\"'!\";isDef(e)&&0<e.length?(a=$$(args).get(e),$$(args).set(e,isDef(a)?merge(a,d):d)):Object.keys(d).forEach(function(l){return $$(args).set(l,d[l])})}"},{"name":"ojob split to items","help":"Splits an args source into an array of maps (_list). Expects:\n\n  source    (String)  A object path to the string source to split\n  separator (String)  The separator for the source string (defaults to \\n)\n\nExample:\n\n  a source string with the value \"abc, xyz, 1\"\n  + separator = ','\n  transforms into:\n\n  - item: abc\n  - item: xyz\n  - item: 1\n","exec":"_$(args.source,\"source\").isString().$_();args.separator=_$(args.separator,\"separator\").isString().default(\"\\n\");ow.loadObj();args._list=String(ow.obj.getPath(args,args.source)).split(args.separator).map(function(a){return{item:a}})"},{"name":"ojob query","exec":"args.where=_$(args.where,\"where\").isArray().default([]);args.select=_$(args.select,\"select\").default(__);args.transform=_$(args.transform,\"transform\").isArray().default([]);args.selector=_$(args.selector,\"selector\").isMap().default(__);args.fromKey=_$(args.fromKey,\"fromKey\").isString().default(\"res\");var a=isDef(args.from)?$from($$($get(args.fromKey)).get(args.from)):$from($get(args.fromKey));args.where.forEach(function(c){return isString(c.cond)?a=a[c.cond].apply(a,c.args):c});args.transform.forEach(function(c){return isString(c.func)?\na=a[c.func].apply(a,c.args):c});var b;isString(args.select)&&(b=a.select(new Function(\"elem\",\"index\",\"array\",args.select)));isMap(args.select)&&(b=a.select(args.select));isUnDef(b)&&isMap(args.selector)&&(b=isString(args.selector.func)?$$({}).set(args.selector.func,a[args.selector.func].apply(a,args.selector.args)):b);isUnDef(b)&&isUnDef(args.select)&&(b=a.select());if(isString(args.key))$set(args.key,b);else return isArray(b)?{_list:b}:b"},{"name":"ojob set envs","help":"Sets job args based on environment variables. Expects:\n\n  envs  (Map) A map where each key corresponds to an environment variable and the value to the args path where it should be placed\n","exec":"_$(args.envs,\"envs\").isMap().$_();Object.keys(args.envs).forEach(function(a){var b=args.envs[a];a=getEnv(a);isDef(a)&&!isNull(a)&&$$(args).set(String(b),String(a))})"},{"name":"ojob job","help":"Provides a way to organize idempotent jobs. One or more \"checks\" jobs will be called to determine an args._action.\nInitially the args._action is set to \"none\". If the \"checks\" jobs determine an action it will call the corresponding\njobs on \"actions\" jobs. If \"_go=true\" is not provided, instead of running, it will only return a plan of actions. \nFor example:\n\n   - name: Write Hello World\n     to  : ojob job\n     args:\n       _checks : Check Hello World\n       _actions:\n         create   : Create Hello World\n         overwrite: Overwrite Hello World\n         delete   : Delete Hello World\n","check":{"in":{"_go":"toBoolean.isBoolean.default(false)"}},"exec":"isString(args._checks)&&(args._checks=[args._checks]);isString(args._actions)&&(args._actions={none:args._actions});var c=function(a){a=clone(a);delete a._checks;delete a._actions;return a};args._action=\"none\";args._checks.forEach(function(a){isString(a)?(a=$job(a,c(args)),isMap(a)&&isString(a._action)&&(args._action=a._action)):logErr(\"oJob Job 'checks' must be job names\")});var d=[];if(isDef(args._actions[args._action])){var b;isArray(args._actions[args._action])&&(b=args._actions[args._action]);\nisString(args._actions[args._action])&&(b=[args._actions[args._action]]);b.forEach(function(a){args._go?$job(a,c(args)):d.push(a)})}args._plan=d"},{"name":"ojob set state","help":"Changes the current state. Expects:\n\n  state  (String) The state to change to (to execute todo.when)\n","exec":"_$(args.state,\"state\").isString().$_();ow.oJob.setState(args.state)"},{"name":"ojob get state","help":"Gets the current state into args.state.\n","exec":"args.state=ow.oJob.getState()"},{"name":"ojob state","help":"Changes the current state depending on the value of a provided args variable. Expects:\n\n  stateOn     (String)  The variable in args that will define the current global set (to execute todo.when)\n  lowerCase   (Boolean) Compare the stateOn in lower case (defaults to false)\n  validStates (Array)   An array of valid states to change to. If not included the default will be choosen (or none).\n  default     (Array)   Default map of \"todo\"s\n\n  Example:\n\n    stateOn  : mode\n    lowerCase: true\n    default  : Help\n","exec":"args.stateOn=_$(args.stateOn,\"stateOn\").default(\"state\");args.lowerCase=_$(args.lowerCase,\"lowerCase\").isBoolean().default(!1);args.state=_$(args[args.stateOn],args.stateOn).default(args.default);args.lowerCase&&isString(args.state)&&(args.state=args.state.toLowerCase());isArray(args.validStates)&&0>args.validStates.indexOf(args.state)&&(isDef(args.default)?args.state=args.default:args.state=__);isString(args.state)&&isDef(ow.oJob.setState)&&ow.oJob.setState(args.state)"}]}