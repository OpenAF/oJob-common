# Test oJob functionality
# Author: Nuno Aguiar

jobs:
 # Test assert
 #
 - name: oJob Assert
   help: >
     This job will assert that args.a and args.b provided are equal. Otherwise it will 
     display the args.msg message.
   exec: >
     if(isUnDef(args.a) || isUnDef(args.b)) throw "Please define args.a and args.b.";
     if(isUnDef(args.msg)) args.msg = "A is different from B";

     ow.loadTest().assert(args.a, args.b, args.msg); 

 # Test functions
 #
 - name: oJob Test
   help: >
     This job will test an args.func (function) or an args.job provided. The test will use the current
     oJob job name. Optionally you can specify args.count (defaults to 1) to test more than one time.
   exec: |
     if (isUnDef(args.func) && isUnDef(args.job)) throw "Please define args.func or an args.job."
     var count = _$(args.count, "count").toNumber().isNumber().default(1)
     if (isDef(args.func)) {
        if (!(isFunction(args.func))) args.func = new Function(args.func)
        for(var c = 0; c < count; c++) ow.loadTest().test(job.name, args.func) 
     } else {
        if (isDef(args.job)) {
          for(var c = 0; c < count; c++) ow.loadTest().test(job.name, () => $job(args.job) )
        }
     }

 # test outside commands
 #
 - name: oJob Test sh
   help: >
     This job will test a args.cmd (shell command) provided. The test will use the current
     oJob job name.
   exec: >
     if (isUnDef(args.cmd)) throw "Please define args.cmd.";
     ow.loadTest().test(job.name, args.cmd); 

 # Test results jobs
 #

 - name: oJob Test Results
   help: |
     Prints or outputs (if args.quiet = true) a args.results with: count of tests, tests passed, tests failed and all profile information.
   exec: |
     var prof = ow.loadTest().__profile
     args.results = {
        count: ow.loadTest().getCountTest(),
        pass: ow.loadTest().getCountPass(),
        fail: ow.loadTest().getCountFail(),
        profile: Object.keys(prof).map(r => ({
          name: r,
          hits: prof[r].hits,
          sum : prof[r].sum,
          last: prof[r].last,
          max : prof[r].max,
          min : prof[r].min,
          avg : prof[r].sum / prof[r].hits
        }))
     };
     if ((isDef(args.quiet) && !args.quiet) || isUnDef(args.quiet)) ow.oJob.output(args.results)

 - name: oJob Test Todo results
   help: |
     Prints or outputs (if args.quiet = true) a args.results with: count of tests, tests passed and tests failed.
   exec: >
     args.results = {
        count: $ch("oJob::logs").size(),
        pass: $from($ch("oJob::logs").getAll()).equals("success", true).count(),
        fail: $from($ch("oJob::logs").getAll()).equals("error", true).count()
     };
     if ((isDef(args.quiet) && !args.quiet) || isUnDef(args.quiet)) ow.oJob.output(args.results)

# JUnit results
#

 - name: oJob Generate JUnit XML
   help: >
     This job will generate a JUnit XML with the current test results. You can provide:
       - suitesId    (String)   The JUnit suites id 
       - suitesName  (String)   The JUnit suites name
       - resultsFile (String)   The filename and path where to store the JUnit results.
   exec: |
     if (isUnDef(args.suitesId)) args.suitesId = "test";
     if (isUnDef(args.suitesName)) args.suitesName = "test";
     if (isUnDef(args.resultsFile)) args.resultsFile = "testResults.xml";
     io.writeFileString(args.resultsFile, ow.loadTest().toJUnitXML(args.suitesId, args.suitesName)); 