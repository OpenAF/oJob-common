# Copyright 2025 Nuno Aguiar
# MCP Server Job
# This job starts a MCP server that listens for requests and executes jobs based on the requests.

include:
- oJobHTTPd.yaml

jobs:
# -------------------------
- name    : HTTP MCP Server
  typeArgs:
    noLog   : false 
    shortcut:
      name  : httpdMCP
      keyArg: port
      args  :
        description: description
        uri        : uri
        debug      : debug
        fnsMeta    : fnsMeta
        fns        : fns
  help    :
    text: Starts a MCP server to handle requests with execution of jobs.
    expects: 
    - name: port 
      desc: (Number) The port to listen on.
    - name: uri
      desc: (String) The URI to handle requests. Default is "/mcp".
    - name: debug
      desc: (Boolean) If true, debug messages will be logged.
    - name: fnsMeta
      desc: (Array) Metadata for the functions available in the MCP server.
    - name: fns
      desc: (Map) Functions to be executed when called from the MCP server.
  check   :
    in: 
      description: isMap.default(__)
      port       : isNumber
      uri        : isString.default("/mcp")
      debug      : isBoolean.default(false)
      fnsMeta    : isArray.default([])
      fns        : isMap.default({})
  deps    :
  - HTTP Start Server
  exec    : | #js
    // Ensures default server info and capabilities
    args.description = merge({
      serverInfo: {
          name: "OpenAF",
          title: "OpenAF test",
          version: "1.0.0"
      },
      capabilities: {
          prompts: {
              listChanged: true
          },
          tools: {
              listChanged: true
          }
      }
    }, args.description)

    fns = {}
    fns[args.uri] = req => ow.server.httpd.replyMCP(global.__ojobHttp[args.port], req, {
        initialize                 : params => {
            if (args.debug) log(`initialize -- ${af.toCSLON(params)}`)
            return args.description
        },
        "notifications/initialized": params => ({}),
        "tools/call"               : params => {
            if (args.debug) log(`tools/call -- ${af.toCSLON(params)}`)
            // name: ping
            // arguments: {}
            // _meta: ...
            var _res
            if (isDef(args.fns[params.name])) {
              try {
                if (isString(args.fns[params.name])) {
                  _res = $job(args.fns[params.name], params.arguments)
                } else {
                  throw "Function not found: " + params.name
                }
              } catch(e) {
                logErr(`Error executing tool '${params.name}': ${e.message}`)
                _res = {
                    content: [{
                        type: "text",
                        text: `Error executing tool '${params.name}': ${e.message}`
                    }],
                    isError: true
                }
                $err(e)
              }
            } else {
              _res = {
                  content: [{
                      type: "text",
                      text: `Error: Unknown tool '${params.name}'`
                  }],
                  isError: true
              }
            }

            if (isString(_res.text)) {
              _res = {
                  content: [{
                      type: "text",
                      text: _res.text
                  }],
                  isError: false
              }
            } else if (isUnDef(_res.result)) {
              _res = {
                  content: [{
                      type: "text",
                      text: stringify(_res, __, "")
                  }],
                  isError: false
              }
            } else {
              _res = _res.result
            }

            return _res
        },
        "tools/list": params => {
            if (args.debug) log(`tools/list -- ${af.toCSLON(params)}`)
            args.fnsMeta = Object.keys(args.fns).map(f => {
              if (isDef(args.fnsMeta[f])) {
                return args.fnsMeta[f]
              } else {
                return {
                  name       : f,
                  description: f,
                  title      : f,
                  parameters : []
                }
              }
            })
            return {
                tools: args.fnsMeta
            }
        },
        "prompts/list": params => ({})
    })

    ow.server.httpd.route(global.__ojobHttp[args.port], merge(global.__ojobRoutes[args.port], fns))
    log("READY [" + args.port + "]")

# - name: ping
#   exec: | #js
#     args.text = "PONG!"

# - name: echo
#   exec: | #js
#     args.text = args.text

# todo:
# - (httpdStart): 17878
# - (httpdMCP  ): 17878
#   ((debug   )): true
#   ((uri     )): "/mcp"
#   ((fnsMeta )):
#   - name       : ping
#     description: Pings the server
#     title      : ping
#     parameters : []
#   - name       : echo
#     description: Echoes the input
#     title      : echo
#     parameters : 
#     - name        : text
#       type        : string
#       description : Text to echo
#   ((fns     )):
#     ping: ping
#     echo: echo

# ojob:
#   daemon: true