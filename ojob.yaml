# Author: Nuno Aguiar

jobs:
# OJOB DEBUG
# ----------------
- name: ojob debug
  exec: |
    ow.loadFormat();
    print("");
    cprint( ow.format.withSideLine("ARGS:", __, "YELLOW", "BOLD", ow.format.withSideLineThemes().openBottomCurvedRect) );
    cprint( ow.format.withSideLine(colorify(args), __, "YELLOW", __, ow.format.withSideLineThemes().openTopCurvedRect) );
    cprint( ow.format.withSideLine("RES:", __, "YELLOW,BOLD", "BOLD", ow.format.withSideLineThemes().openBottomCurvedRect) );
    cprint( ow.format.withSideLine(colorify($get("res")), __, "YELLOW,BOLD", __, ow.format.withSideLineThemes().openTopCurvedRect) );

# OJOB GET
# --------------
- name: ojob get
  help: >
    Retrieves a specific map key (or path) using $get

      key  (String)  Map key or path

  exec: |
    args.key = _$(args.key, "key").isString().default("res");
    var res = $get(args.key);
    if (isArray(res)) res = { _list: res };
    return res;

# OJOB FILE GET
# -------------------
- name: ojob file get
  help: >
    Retrieves a specific map key (or path) from an YAML or JSON file provided.

      __file  (String)  The file path to an YAML or JSON file
      __key   (String)  Map key or path on the file contents
      __cache (Boolean) If false it won't cache the file contents (default: true)
      __ttl   (Number)  If cache is enabled lets you definea ttl
      __out   (String)  The path on args to set the map key/path contents

  exec: |
    args.__file  = _$(args.__file, "__file").isString().$_();
    args.__key   = _$(args.__key, "__key").isString().default("res");
    args.__cache = toBoolean(_$(args.__cache, "__cache").default("true"));
    args.__ttl   = _$(args.__ttl, "__ttl").isNumber().default(__);
    args.__out   = _$(args.__out, "__out").isString().default(__);

    var res;
    if (args.__cache) {
      var c = $cache("__ojob_file_get");
      if (isDef(args.__ttl)) c= c.ttl(args.__ttl);
      c = c.fn(aK => {
        if (isDef(aK.file)) {
          if (aK.file.endsWith(".json")) {
            return io.readFileJSON(aK.file);
          } else {
            if (/\.ya?ml$/.test(aK.file)) {
              return io.readFileYAML(aK.file);
            } else {
              return { error: "Not an yaml, yml or json file."};
            }
          }
        } else {
          return {}
        }
      })
      .create();

      res = c.get({ file: args.__file });
    } else {
      if (args.__file.endsWith(".json")) {
        res = io.readFileJSON(args.__file);
      } else {
        if (/\.ya?ml$/.test(args.__file)) {
          res = io.readFileYAML(args.__file);
        } else {
          res = { error: "Not an yaml, yml or json file."};
        }
      }
    }

    res = $$(res).get(args.__key);
    if (isDef(args.__out)) {
      $$(args).set(args.__out, res);
    } else {
      Object.keys(res).forEach(r => $$(args).set(r, res[r]));
    }

# OJOB FUNCTION
# -------------------
- name: ojob function
  help: >
    Executes the provided function mapping any args to the function arguments using the odoc help available for the provided function.
    Note: accessing odoc might be slow on a first execution.

      __key     (String)  The key string to retrieve previous results (defaults to 'res')
      __fn      (String)  The function to execute
      __path    (String)  If defined the args path for the function arguments to consider
      __fnPath  (String)  If defined the args path where to set the function result

  exec: |
    _$(args.__fn, "__fn").isString().$_();

    if (args.__fn.indexOf(".") < 0) args.__fn = "global." + args.__fn; 
    var res = $fnM(args.__fn, (isDef(args.__path) ? $$(args).get(args.__path) : args));
    if (isString(args.__fnPath)) res = $$({}).set(args.__fnPath, res);
    if (isString(args.__key)) $set(args.__key, res); else return res;

# OJOB OUTPUT
# -----------------
- name: ojob output
  help: >
    Prints the current arguments to the console. Optionally expects:
    
       key      (String)  The key string to retrieve previous results (defaults to 'res')
       path     (String)  A path string to a map/array over the results set on key. 
       format   (String)  The output format (e.g. see ow.oJob.output help)
       title    (String)  Encapsulates the output map/array with a title key.
       internal (Boolean) If true it will display the internal oJob entries on the arguments (default false)
 
  exec: |
    args.key = _$(args.key, "key").isString().default("res");
    var res = $get(args.key);
    if (isUnDef(res)) res = args;
    if (isDef(res) && !toBoolean(args.internal)) {
       delete res.objId;
       delete res.execid;
       delete res.id;
    }

    if (isDef(args.format)) { args.__format = args.format; delete args.format; }
    if (isDef(args.path)) res = $$(res).get(args.path);
    if (isMap(res) && isDef(res._list)) res = res._list;
    if (isMap(res) && isDef(res._map))  res = res._map;

    if (isDef(args.title)) {
      var r = {}; r[args.title] = res;
      ow.oJob.output(r, args);
    } else {
      ow.oJob.output(res, args);
    }

# OJOB FINAL REPORT
# -------------------------------
- name        : ojob final report
  to          : ojob report
  type        : shutdown
  help        : >
    Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution) upon ojob termination

      __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format

# OJOB REPORT
# -------------------------
- name        : ojob report
  help        : >
    Outputs a jobs report (e.g. job name, status, number of executions, total time, avg time and last execution)

      __format  (String)  Can be json, yaml, table (default) or any other ow.oJob.output format

  exec        : |
    ow.loadFormat(); print("\n");

    var logs = $ch("oJob::log").getAll();
    var report = $from(logs)
                 .notEquals("name", "ojob report")
                 .notEquals("name", "ojob final report")
                 .select(r => ({
          "Job name"  : r.name,
          "Status"    : (r.start ? (r.success ? "OK" : (r.deps ? (r.error ? "NOT OK!" : "executing") : "failed deps")) : "not started"),
          "# execs"   : r.count,
          "Total time": ow.format.elapsedTime4ms(r.totalTime, { abrev: true }),
          "Avg time"  : ow.format.elapsedTime4ms(r.avgTime, { abrev: true }),
          "Last exec" : (r.log.length > 0 ? ow.format.timeago($from(r.log).sort("-endTime").at(0).endTime) : "n/a")
      }));

    report.push({
      "Job name"  : "TOTAL:",
      "Status"    : "",
      "# execs"   : "",
      "Total time": ow.format.elapsedTime4ms((now() - $from(logs).sort("createDate").at(0).createDate)),
      "Avg time"  : "",
      "Last exec" : ""
    });

    args.__format = _$(args.__format).default("table");
    ow.oJob.output(report, args);

# OJOB SWITCH
# ------------------
- name: ojob options
  help: |
    Adds new "todo" entries depending on the value of a provided args variable. Expects:

      optionOn      (String)  The variable in args that will define which set of "todo"s will be added (trimmed)
      lowerCase     (Boolean) Compare the switchOn in lower case (defaults to false)
      todos.[value] (Map)     Map of "todo"s
      default       (Array)   Default map of "todo"s

      Example:

        optionOn : mode
        lowerCase: true
        todos    :
          mode1:
          - Job 1
          - Job 2
          mode2:
          - Job 2
          - Job 3
        default:
        - Job 2

  exec: |
    _$(args.optionOn, "optionOn").isString().$_();
    _$(args.todos, "todos").isMap().$_();
    args.lowerCase = _$(args.lowerCase, "lowerCase").isBoolean().default(false);
    args.default   = _$(args.default, "default").isArray().default([]);
    args.end       = _$(args.end, "end").isArray().default([]);

    var todoValue = String(args[args.optionOn]).trim();
    if (args.lowerCase) todoValue = todoValue.toLowerCase();

    var res = args;
    var rj = job => (isMap(job) ? $job(job.name, merge(job.args, res)) : $job(job, res));
    if (isDef(args.todos[todoValue]) && isArray(args.todos[todoValue])) {
      args.todos[todoValue].forEach(j => res = rj(j));
    } else {
      args.default.map(j => res = rj(j));
    }
    
# OJOB SEC GET
# ------------------
- name: ojob sec get
  help: |
    This job will get a SBucket secret and map it to oJob's args:

      - secIn               (String)  The args path where all the remaining sec arguments should be read from (defaults to no path)
      - [secIn].secOut      (string)  The args path to be mapped with the secret (defaults to secIn)
      - [secIn].secKey      (string)  The SBucket key
      - [secIn].secRepo     (string)  The SBucket repository
      - [secIn].secBucket   (string)  The SBucket name
      - [secIn].secPass     (string)  The SBucket password
      - [secIn].secMainPass (string)  The SBucket repository password
      - [secIn].secFile     (string)  Optional provide a specific sbucket file
      - [secIn].secDontAsk  (string)  Determine if passwords should be asked from the user (default=false)
      - [secIn].secIgnore   (boolean) If true will ignore errors of sec parameters not being provided (default=false)
   
  exec: |
    var secIn     = _$(args.secIn, "secIn").isString().default("");
    if (secIn != "") secIn += ".";

    var secIgnore   = _$($$(args).get(secIn + "secIgnore"), "secIgnore").isBoolean().default(false);
    var secOut      = _$($$(args).get(secIn + "secOut"), "secOut").default(secIn != "" ? secIn.replace(/\.$/, "") : __);
    if (!secIgnore) _$($$(args).get(secIn + "secKey"), "secKey").$_();
    var secDontAsk  = toBoolean( _$($$(args).get(secIn + "secDontAsk"), "secDontAsk").default(false) );
    var secKey      = _$($$(args).get(secIn + "secKey"), "secKey").default(__);
    var secBucket   = _$($$(args).get(secIn + "secBucket"), "secBucket").default(__);
    var secPass     = _$($$(args).get(secIn + "secPass"), "secPass").default(__);
    var secFile     = _$($$(args).get(secIn + "secFile"), "secFile").default(__);
    var secRepo     = _$($$(args).get(secIn + "secRepo"), "secRepo").default(__);
    var secMainPass = _$($$(args).get(secIn + "secMainPass"), "secMainPass").default(__);

    if (!secDontAsk && isDef(secKey)) {
       secBucket = askDef(secBucket, "Sec bucket: ");
       if (isDef(secBucket) && isUnDef(secFile)) secPass = askDef(secPass, "Sec bucket '" + secBucket + "' pass: ", true);
       if (isDef(secRepo))                       secMainPass = askDef(secMainPass, "Sec repo '" + secRepo + "' pass: ", true);
    }
    if (isDef(secKey)) {
       var res = $sec(secRepo, secBucket, secPass, secMainPass, secFile).get(secKey);
       if (isUnDef(res)) throw "Couldn't retrieve secKey '" + secKey + "' from bucket '" + secBucket + "'!";
       if (isDef(secOut)) {
         var prev = $$(args).get(secOut);
         $$(args).set(secOut, (isDef(prev) ? merge(prev, res) : res));
       } else {
         Object.keys(res).forEach(r => $$(args).set(r, res[r]));
       }
    } 

# OJOB SPLIT TO ITEMS
# -------------------------
- name: ojob split to items
  help: |
    Splits an args source into an array of maps (_list). Expects:

      source    (String)  A object path to the string source to split
      separator (String)  The separator for the source string (defaults to \n)

    Example:

      a source string with the value "abc, xyz, 1"
      + separator = ','
      transforms into:

      - item: abc
      - item: xyz
      - item: 1
  exec: |
    _$(args.source, "source").isString().$_();
    args.separator = _$(args.separator, "separator").isString().default("\n");

    ow.loadObj();
    args._list = String(ow.obj.getPath(args, args.source)).split(args.separator).map(r => {
      return { item: r };
    });

# OJOB QUERY
# ----------------
- name: ojob query
  exec: |
    args.where     = _$(args.where, "where").isArray().default([]);
    args.select    = _$(args.select, "select").default(__);
    args.transform = _$(args.transform, "transform").isArray().default([]);
    args.selector  = _$(args.selector, "selector").isMap().default(__);

    args.fromKey = _$(args.fromKey, "fromKey").isString().default("res");

    var f = isDef(args.from) ? $from($$($get(args.fromKey)).get(args.from)) : $from($get(args.fromKey));
    args.where.forEach(w => (isString(w.cond) ? f = f[w.cond].apply(f, w.args) : w));
    args.transform.forEach(t => (isString(t.func) ? f = f[t.func].apply(f, t.args) : t));
 
    var res; 
    if (isString(args.select)) res = f.select(new Function("elem", "index", "array", args.select));
    if (isMap(args.select))    res = f.select(args.select);

    if (isUnDef(res) && isMap(args.selector)) res = (isString(args.selector.func) ? $$({}).set(args.selector.func, f[args.selector.func].apply(f, args.selector.args)) : res);

    if (isUnDef(res) && isUnDef(args.select)) res = f.select();

    if (isString(args.key)) { 
      $set(args.key, res);
    } else { 
      return isArray(res) ? { _list: res } : res 
    }

# OJOB ENV
# --------
- name: ojob set envs
  help: |
    Sets job args based on environment variables. Expects:

      envs  (Map) A map where each key corresponds to an environment variable and the value to the args path where it should be placed
  exec: |
    _$(args.envs, "envs").isMap().$_();

    Object.keys(args.envs).forEach(key => {
      var p = args.envs[key];
      var v = getEnv(key);
      if (isDef(v) && !isNull(v)) $$(args).set(String(p), String(v));
    });

# OJOB STATE
# --------------------
- name: ojob set state
  help: |
    Changes the current state. Expects:

      state  (String) The state to change to (to execute todo.when)
  exec: |
    _$(args.state, "state").isString().$_();
    ow.oJob.setState(args.state);

# --------------------
- name: ojob get state
  help: |
    Gets the current state into args.state.
  exec: |
    args.state = ow.oJob.getState();

# ----------------
- name: ojob state
  help: |
    Changes the current state depending on the value of a provided args variable. Expects:

      stateOn     (String)  The variable in args that will define the current global set (to execute todo.when)
      lowerCase   (Boolean) Compare the stateOn in lower case (defaults to false)
      validStates (Array)   An array of valid states to change to. If not included the default will be choosen (or none).
      default     (Array)   Default map of "todo"s

      Example:

        stateOn  : mode
        lowerCase: true
        default  : Help

  exec: |
    args.stateOn   = _$(args.stateOn, "stateOn").default("state");
    args.lowerCase = _$(args.lowerCase, "lowerCase").isBoolean().default(false);
    args.state     = _$(args[args.stateOn], args.stateOn).default(args.default);
    if (args.lowerCase && isString(args.state)) args.state = args.state.toLowerCase();
    if (isArray(args.validStates)) {
      if (args.validStates.indexOf(args.state) < 0) {
        if (isDef(args.default)) args.state = args.default; else args.state = __;
      }
    }

    if (isString(args.state) && isDef(ow.oJob.setState)) ow.oJob.setState(args.state);