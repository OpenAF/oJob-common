# oJob Email
# Author: Nuno Aguiar

jobs:
  ## ------------
  ## Send email
  ## ------------
  
  - name       : oJob Send email
    help       : |
      This job tries to send an email. Expects:
        - args.server         (String)  The email server to use
        - args.port           (Number)  The email server port to use
        - args.from           (String)  The email from address
        - args.to             (Array)   The email to addresses
        - args.cc             (Array)   The email cc addresses
        - args.bcc            (Array)   The email bcc addresses
        - args.isHTML         (Boolean) Specifies if the email is in HTML format
        - args.output         (String)  The email body message (a hbs template using args as data)
        - args.altOutput      (String)  The email body alternative message (defaults to message)
        - args.credentials    (Map)     The email server credentials (user and pass)
        - args.useSSL         (Boolean) If the email server uses SSL
        - args.useTLS         (Boolean) If the email server uses TLS
        - args.embedFiles     (Array)   Array of maps (with file and name) to embeded on the email
        - args.addAttachments (Array)   Array of maps (with file, isInLine, name) to attach on the email
        - args.addImages      (Array)   Array of urls to images (only available if isHTML = true)
        - args.embedURLs      (Array)   Array of maps (with url and name) to embeded on the email
        - args.subject        (String)  The email subject (a hbs template using args as data)
        - args.debug          (Boolean) Determines if it should debug the process
    exec       : |
      if (isString(args.to)) args.to = [ String(args.to) ];
      if (isString(args.cc)) args.cc = [ args.cc ];
      if (isString(args.bcc)) args.bcc = [ args.bcc ];

      var cL = (l) => {
        for(var o in l) {
          l[o] = String(l[o]);
        }
      };

      _$(args.server).isString().$_("Please provide an email server.");
      _$(args.from).isString().$_("Please provide a from email address.");
      _$(args.to).isArray().$_("Please provide the to email addresses.");
      _$(args.subject).isString().$_("Please provide a subject.");
      _$(args.output).isString().$_("Please provide an output.");

      cL(args.to);
      cL(args.cc);
      cL(args.bcc);

      args.cc          = _$(args.cc).isArray().default([]);
      args.bcc         = _$(args.bcc).isArray().default([]);
      args.debug       = _$(args.debug).isBoolean().default(void 0);
      args.port        = _$(args.port).isNumber().default(void 0);
      args.useSSL      = _$(args.useSSL).isBoolean().default(true);
      args.useTLS      = _$(args.useTLS).isBoolean().default(false);
      args.embedFiles  = _$(args.embedFiles).isArray().default(void 0);
      args.embedURLs   = _$(args.embedURLs).isArray().default(void 0);
      args.addImages   = _$(args.addImages).isArray().default(void 0);
      args.isHTML      = _$(args.isHTML).isBoolean().default(false);
      args.altOutput   = _$(args.altOutput).isString().default(args.output);
      args.credentials = _$(args.credentials).isMap().default(void 0);

      plugin("Email");
      var email = new Email(args.server, args.from, args.useSSL, args.useTLS, args.isHTML);
      if (isDef(args.port)) email.setPort(args.port);
      email.setCharset("UTF-8");

      if (isDef(args.credentials)) email.setCredentials(args.credentials.user, args.credentials.pass);
      if (args.debug) email.getEmailObj().setDebug(true);

      if (isDef(args.embedFiles)) {
        for(var ii in args.embedFiles) {
          email.embedFile(args.embedFiles[ii].file, args.embedFiles[ii].name);
        };
      }

      if (isDef(args.embedURLs)) {
        for(var ii in args.embedURLs) {
          email.embedURL(args.embedURLs[ii].url, args.embedURLs[ii].name);
        };
      }

      if (isDef(args.addAttachments)) {
        for(var ii in args.addAttachments) {
          email.addAttachment(args.addAttachments[ii].file, args.addAttachments[ii].isInLine, void 0, args.addAttachments[ii].name);
        };
      }

      if (isDef(args.addImages)) {
        for(var ii in args.addImages) {
          email.addExternalImage(args.addImages[ii]);
        };
      }

      if (args.isHTML) {
        email.setHTML(templify(args.output, args));
      } else {
        email.setMessage(templify(args.output, args));
      }
      
      try {
      args.result = email.send(templify(args.subject, args), templify(args.altOutput, args), args.to, args.cc, args.bcc, args.from);
      } catch(e) {
        e.javaException.printStackTrace();
      }
