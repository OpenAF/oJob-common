# Author: Nuno Aguiar

jobs:
   # Prepares a HTTP server
   #
   - name: HTTP Start Server 
     help: >
        Provides a HTTP server. The expected arguments are:
           - args.port     (Number)     The port where the server should be made available (default is 8091)
           - args.hs       (HTTPServer) A HTTPServer to use (is not provided one will be created)
           - args.keystore (String)     Optionally to create a https server provide a keystore file
           - args.pass     (String)     The password for the keystore of a https server
           - args.host     (String)     Optionally the interface where the server should be listening (default is all)
           - args.cp       (String)     Optionally providing the classpath URL to include the keystore file
           - args.mapLibs  (boolean)    Map also internal libs (e.g. jquery, css, etc...)
     exec: |
        ow.loadServer();
        var ks;
        if (isUnDef(__pmIn.__ojobHttp)) __pmIn.__ojobHttp = {};
        if (isUnDef(__pmIn.__ojobRoutes)) __pmIn.__ojobRoutes = {};
        if (isUnDef(args.port)) args.port = 8091;
        if (isDef(args.cp)) af.externalAddClasspath(args.cp);
        if (isDef(args.keystore)) ks = "/" + args.keystore;
        args.mapLibs = _$(args.mapLibs).isBoolean().default(false);

        if (isUnDef(__pmIn.__ojobHttp[args.port])) __pmIn.__ojobHttp[args.port] = (isDef(args.hs) ? hs : ow.server.httpd.start(args.port, args.host, ks, args.pass));
      
        if (args.mapLibs) {
          __pmIn.__ojobRoutes[args.port] = ow.server.httpd.mapRoutesWithLibs(__pmIn.__ojobHttp[args.port], {});
        } else {
          __pmIn.__ojobRoutes[args.port] = {};
        }

   # Applies a HTTP service definition
   #
   - name: HTTP Apply Service 
     exec: |
        if (isUnDef(args.port)) args.port = 8091;

        ow.server.httpd.route(__pmIn.__ojobHttp[args.port], __pmIn.__ojobRoutes[args.port], function(r) { return hs.reply("", "", 401, {}); });
        log("READY [" + args.port + "]");

   # Stopping the HTTP server
   #
   - name: HTTP Stop Server
     type: shutdown
     help: >
        Sets a shutdown job for the server. Expects:
           - args.port       (Number)   The port where the server was made available (default is 8091)

        If using sequential do ensure that the job 'HTTP Start Server' gets executed first.
     deps:
        - HTTP Start Server
     exec: |
        if (isUnDef(args.port)) args.port = 8091;
        ow.server.httpd.stop(__pmIn.__ojobHttp[args.port]);
        delete __pmIn.__ojobHttp[args.port];
        delete __pmIn.__ojobRoutes[args.port];
        log("STOPPED [" + args.port + "]");

   # Defines a HTTP service
   #
   - name: HTTP Service
     deps: 
        - HTTP Start Server
     to  : HTTP Apply Service
     help: >
        Provides a HTTP service definition. The expected arguments are:
           - args.port       (Number)   The port where the server was made available (default is 8091)
           - args.uri        (String)   The URI where the HTTP service will be available.
           - args.execURI    (Function) The GET function. Receives a request map and a server object.

        If using sequential jobs do ensure that the job 'HTTP Start Server' gets executed first.
     exec: |
        args.port    = _$(args.port).isNumber().default(8091);
        args.uri     = _$(args.uri).isString().default("/");

        __pmIn.__ojobRoutes[args.port][args.uri] = function(r) {
           return (new Function("var request = arguments[0]; var server = __pmIn.__ojobHttp[" + args.port + "]; var port = " + String(args.port) + "; var uri = '" + args.uri + "'; " + args.execURI))(r);
        };

   # Defines a classic HTTP file browse
   #
   - name: HTTP Classical File Browse
     deps:
        - HTTP Start Server
     help: >
        Provides a classical HTTP file browse definition. The expected arguments are:
           - args.port  (Number) The port where the server was made available (default is 8091)
           - args.uri   (String) The URI where the HTTP File Browse will be available.
           - args.path  (String) The canonical path (real path) to the folder that contains the file to be browsed.
     exec: |
        args.port    = _$(args.port).isNumber().default(8091);
        args.uri     = _$(args.uri).isString().default("/");
        _$(args.path).isString().$_("You need to provide a path.");

        __pmIn.__ojobHttp[args.port].addFileBrowse(args.uri, args.path);

   # Defines a HTTP file browse
   #
   - name: HTTP File Browse
     deps:
        - HTTP Start Server
     to  : HTTP Service
     help: >
        Provides a HTTP file browse definition. The expected arguments are:
           - args.port   (Number) The port where the server was made available (default is 8091)
           - args.uri    (String) The URI where the HTTP File Browse will be available.
           - args.path   (String) The canonical path (real path) to the folder that contains the file to be browsed.
           - args.browse (String) If "false" no browsing interface is included.
     args: 
       execURI   : |
         var shouldBrowse = global.__MHTTPD[String(port) + uri].BROWSE;
         var path         = global.__MHTTPD[String(port) + uri].PATH;
         var tmplb        = global.__MHTTPD[String(port) + uri].TMPLB;
         var tmplh        = global.__MHTTPD[String(port) + uri].TMPLH;

         var content = "";
         var puri = String(request.uri).replace(new RegExp("^" + uri), (uri == "/" ? "" : "/")).replace(/\/+/g, "/");
         var furi = String((new java.io.File(new java.io.File(String((new java.io.File(path + "/" + puri)).getCanonicalFile()).replace(/\\+/g, "/")))));

         var finfo;
         try { 
            finfo = io.fileInfo(furi);
         } catch(e) {
            return server.replyOKHTML("");
         }
         
         if (finfo.isDirectory) { 
            if (shouldBrowse) {
               content += tmplh({ puri: (puri == "" ? "/" : puri) });
               content += "| Filename | Last modified | Size | Size in bytes |\n";
               content += "|----------|:-------------:|-----:|--------------:|\n";
               if (puri != "/" && puri != "") 
                 content += "| __[..](" + uri + puri.replace(/[^\/]+\/$/, "") + ")__ | | |\n";

               var theList = $from(io.listFiles(furi).files).sort("-isDirectory", "filename").select((f) => {
               return merge(f, {
                  fLastModified: ow.format.fromDate(new Date(f.lastModified), 'yyyy-MM-dd HH:mm:ss'),
                  fSize        : ow.format.toBytesAbbreviation(f.size),
                  puri         : puri,
                  uri          : uri
               });
               });
               content += tmplb(theList);
            }
         } else {
            if (request.uri.endsWith(".md")) {
               return ow.server.httpd.replyFileMD(server, path, uri, request.uri); 
            } else {
               return ow.server.httpd.replyFile(server, path, uri, request.uri);
            }
         }
         
         if (shouldBrowse)
            return server.replyOKHTML(ow.template.parseMD2HTML(content, true));
         else
            return server.replyOKHTML("");

     exec: |
       ow.loadTemplate(); ow.loadFormat();
       ow.template.addHelper("encodeURI", encodeURI);

       var temph = _$(args.templateHead).isString().default("## {{puri}}<img align=\"right\" src=\"/fonts/openaf_small.png\">\n");
       var templ = _$(args.template).isString().default("{{#each this}}| {{#if isDirectory}}__[{{filename}}/]({{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}/)__ | {{fLastModified}} | | {{else}} [{{filename}}]({{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}) | {{fLastModified}} {{/if}} | {{fSize}} | {{size}} | \n{{/each}}");

       args.uri  = _$(args.uri).isString().default("/");
       args.path = _$(args.path).isString().default("."); 

       global.__MHTTPD = _$(global.__MHTTPD).isMap().default({});
       global.__MHTTPD[String(args.port) + args.uri] = {
         BROWSE: _$(args.browse).isString().default("true") === 'true',
         PATH  : String( (new java.io.File( args.path )).getCanonicalPath() ),
         TMPLB : ow.template.execCompiled(ow.template.compile(templ)),
         TMPLH : ow.template.execCompiled(ow.template.compile(temph))
       };
         