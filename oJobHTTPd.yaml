# Copyright 2025 Nuno Aguiar

jobs:
# Prepares a HTTP server
#
# ------------------------
- name : HTTP Start Server 
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdStart
      keyArg: port
      args  :
        hs      : hs
        keystore: keystore
        pass    : pass
        host    : host
        cp      : cp
        mapLibs : mapLibs
  help :     
   text   : Provides and starts a HTTP server.
   expects:
   - name: port
     desc: (Number) The port where the server should be made available (default is 8091)
   - name: hs
     desc: (HTTPServer) A HTTPServer to use (is not provided one will be created)
   - name: keystore 
     desc: (String) Optionally to create a https server provide a keystore file
   - name: pass
     desc: (String) The password for the keystore of a https server
   - name: host
     desc: (String) Optionally the interface where the server should be listening (default is all)
   - name: cp
     desc: (String) Optionally providing the classpath URL to include the keystore file
   - name: mapLibs
     desc: (boolean) Map also internal libs (e.g. jquery, css, etc...)
  exec : | #js
      ow.loadServer()

      var ks
      if (isUnDef(global.__ojobHttp)) global.__ojobHttp = {}
      if (isUnDef(global.__ojobRoutes)) global.__ojobRoutes = {}
      if (isUnDef(args.port)) args.port = 8091
      if (isUnDef(args.cp) && isDef(args.keystore) && !isNull(java.io.File(args.keystore).getParent())) args.cp = java.io.File(args.keystore).getParent().toString()
      if (isDef(args.cp)) af.externalAddClasspath(args.cp)
      if (isDef(args.keystore)) ks = args.keystore
      args.mapLibs = _$(args.mapLibs).isBoolean().default(false)

      if (isUnDef(global.__ojobHttp[args.port])) global.__ojobHttp[args.port] = (isDef(args.hs) ? args.hs : ow.server.httpd.start(args.port, args.host, ks, args.pass))

      if (args.mapLibs) {
         global.__ojobRoutes[args.port] = ow.server.httpd.mapRoutesWithLibs(global.__ojobHttp[args.port], {})
      } else {
         global.__ojobRoutes[args.port] = {}
      }

# Applies a HTTP service definition
#
# -------------------------
- name : HTTP Apply Service 
  exec : | #js
   if (isUnDef(args.port)) args.port = 8091

   ow.server.httpd.route(global.__ojobHttp[args.port], global.__ojobRoutes[args.port], function(r) { return global.__ojobHttp[args.port].reply("", "", 401, {}); })
   log("READY [" + args.port + "]")

# Stopping the HTTP server
#
# ----------------------
- name: HTTP Stop Server
  type: shutdown
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdStop
      keyArg: port
      args  : {}
  help: 
    text   : Sets a shutdown job for the server. If using sequential do ensure that the job 'HTTP Start Server' gets executed first.
    expects: 
    - name: port
      desc: (Number) The port where the server was made available (default is 8091)
  deps:
  - HTTP Start Server
  exec: | #js
      if (isUnDef(args.port)) args.port = 8091
      ow.server.httpd.stop(global.__ojobHttp[args.port])
      delete global.__ojobHttp[args.port]
      
      delete global.__ojobRoutes[args.port]
      log("STOPPED [" + args.port + "]")

# Defines a HTTP service
#
# -------------------
- name : HTTP Service
  deps : 
  - HTTP Start Server
  to   : HTTP Apply Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdService
      keyArg: port
      args  : 
        uri          : uri
        execURI      : execURI
        audit        : audit
        auditTemplate: auditTemplate
        error        : error
  help :
    text: Provides a HTTP service definition. If using sequential jobs do ensure that the job 'HTTP Start Server' gets executed first.
    expects:
    - name: port
      desc: (Number) The port where the server was made available (default is 8091)
    - name: uri
      desc: (String) The URI where the HTTP service will be available.
    - name: execURI
      desc: (Function) The URI execution function. Receives a request map and a server object.
    - name: audit
      desc: (Boolean) Turns request audit logging on (default true)
    - name: auditTemplate
      desc: (String) Provide an audit logging template based on the request argument.           
    - name: error
      desc: (Boolean) If true will return the error in case of exception.
  exec : | #js
      args.port    = _$(args.port).isNumber().default(8091)
      args.uri     = _$(args.uri).isString().default("/")
      args.audit   = _$(args.audit).default(true)
      args.auditTemplate = _$(args.auditTemplate).default("AUDIT HTTP | {{method}} {{uri}} {{reply.status}} {{{reply.mimetype}}} ({{header.remote-addr}}; {{header.user-agent}})")     

      var fn = __
      if (args.audit) {
         fn = (req, reply) => {
            var data = merge(req, { 
               reply: {
                  status  : reply.status,
                  mimetype: reply.mimetype
               }
            })
            try { 
               tlog(args.auditTemplate, data)
            } catch(e) {
               logErr("Error on auditing access: " + String(e))
            }
         }
      }

      global.__ojobRoutes[args.port][args.uri] = function(r) {
         try {
            var res = (new Function("var request = arguments[0]; var server = global.__ojobHttp[" + args.port + "]; var port = " + String(args.port) + "; var uri = '" + args.uri + "'; " + args.execURI))(r)
            if (!isMap(res)) res = ow.server.httpd.reply(res, void 0, void 0, {})
            fn(r, res)
            return res
         } catch(e) {
            if (args.error) {
               return { data: String(e), mimetype: "text/plain", status: 500, header: {} }
            }
         }
      }

# -------------------
- name : HTTP Default
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdDefault
      keyArg: port
      args  : 
        uri          : uri
        code         : code
        audit        : audit
        auditTemplate: auditTemplate
        error        : error
  help :
   text   : Provides a HTTP default handler.
   expects:
   - name: port
     desc: (Number) The port where the server was made available (default is 8091)
   - name: uri
     desc: (String) The URI where the HTTP default response will be available (defaults to /)
   - name: code
     desc: (Number) The default HTTP status code to reply (default is 401)
   - name: audit
     desc: (Boolean) Turns request audit logging on (default true)
   - name: auditTemplate
     desc: (String) Provide an audit logging template based on the request argument.           
   - name: error
     desc: (Boolean) If true will return the error in case of exception.
  exec : | #js
      args.code = _$(args.code, "code").isNumber().default(401)
      args.uri  = _$(args.uri, "uri").isString().default("/")
      args.execURI = "return ow.server.httpd.reply(\"\", " + args.code + ", __, {});"

# --------------------
- name : HTTP Redirect
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdRedirect
      keyArg: port
      args  : 
        uri          : uri
        targetURI    : targetURI
        code         : code
        audit        : audit
        auditTemplate: auditTemplate
        error        : error
  help :
   text   : Provides a HTTP default handler.
   expects:
   - name: port
     desc: (Number) The port where the server was made available (default is 8091)
   - name: uri
     desc: (String) The URI where the HTTP default response will be available (defaults to /)
   - name: code
     desc: (Number) The default HTTP status code to reply (default is 401)
   - name: audit
     desc: (Boolean) Turns request audit logging on (default true)
   - name: auditTemplate
     desc: (String) Provide an audit logging template based on the request argument.           
   - name: error
     desc: (Boolean) If true will return the error in case of exception.
   - name: targetURI
     desc: (String) The target URI to redirect to
  exec : | #js
      args.code = _$(args.code, "code").isNumber().default(401)
      args.uri  = _$(args.uri, "uri").isString().default("/")
      args.targetURI = _$(args.targetURI, "targetURI").isString().$_("You need to provide a target URI.")
      args.execURI = "return ow.server.httpd.replyRedirect(server, \"" + args.targetURI + "\", {});"

# ------------------
- name : HTTP Upload
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdUpload
      keyArg: port
      args  : 
        uri          : uri
        path         : path
        execURI      : execURI
        audit        : audit
        auditTemplate: auditTemplate
        error        : error
  help :
    text   : Provides a HTTP upload handler. 
    expects:
    - name: port
      desc: (Number) The port where the server was made available (default is 8091)
    - name: uri
      desc: (String) The URI where the HTTP default response will be available (defaults to /upload)
    - name: path
      desc: (String) The local path where uploaded files will be saved
    - name: execURI
      desc: (Function) The URI execution function. Receives a request map and a server object. If doesn't return any value it will proceed to save the file on the corresponding path after code execution.
    - name: audit
      desc: (Boolean) Turns request audit logging on (default true)
    - name: auditTemplate
      desc: (String) Provide an audit logging template based on the request argument.           
    - name: error
      desc: (Boolean) If true will return the error in case of exception.
  args :
    eURI: |
      if (isDef(request.params) && isDef(request.params.data) && request.method == "POST") {
         log("Received file '" + request.params.data + "'...")
         io.cp(request.files.data, '{{{path}}}/' + request.params.data)
         return "ok"
      } else {
         return server.replyOKHTML("<html><body><form action=\"" + request.uri + "\" enctype=\"multipart/form-data\" method=\"POST\"><input type=\"file\" name=\"data\" value=\"data\" id=\"data\"/><input type=\"submit\" value=\"submit\"/></form></body></html>")
      }
  exec: | #js
      args.path = _$(args.path, "path").default(".")
      args.uri  = _$(args.uri).isString().default("/upload")

      io.mkdir(args.path)
      args.execURI = (isDef(args.execURI) ? args.execURI : "") + "\n" + templify(args.eURI, { path: args.path })

# -------------------
- name : HTTP Healthz
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdHealthz
      keyArg: port
      args  : 
        uri        : uri
        path       : path
        healthz    : healthz
        openmetrics: openmetrics
  help :
   text: Adds a healthz URI
   expects:
   - name: port
     desc: The port of the HTTP Start Server (default to 8091)
   - name: uri
     desc: The uri to use (default /healthz)
   - name: healthz
     desc: A custom function to return the /healthz result (defaults to ow.metrics.getAll with status 200 or "error" with status 500 if an exception is thrown)
   - name: openmetrics
     desc: If openmetrics = true the output will be in openmetrics/prometheus instead of json
  exec: | #js
      ow.loadMetrics()
      args.port    = _$(args.port).isNumber().default(8091)
      args.uri     = _$(args.uri).isString().default("/healthz")

      var s1 = " try { return ow.server.httpd.reply(ow.metrics.getAll()); } catch(e) { return ow.server.httpd.reply(\"error\", 500, void 0, {}); } "
      var s2 = " try { return ow.metrics.fromObj2OpenMetrics(ow.metrics.getAll()); } catch(e) { return ow.server.httpd.reply(\"error\", 500, void 0, {}); } "
      args.healthz = _$(args.healthz).isString().default(args.openmetrics ? s2 : s1)
      args.execURI = args.healthz

# ------------------
- name : HTTP Metrics
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdMetrics
      keyArg: port
      args  : 
        uri    : uri
        metrics: metrics
        prefix : prefix
        helpmap: helpmap 
  help :
   text: Adds a metrics URI with a OpenMetrics/Prometheus output
   expects:
   - name: port
     desc: The port of the HTTP Start Server (default to 8091)
   - name: uri
     desc: The uri to use (default /metrics)
   - name: metrics
     desc: A custom function to return the /metrics result (defaults to ow.metrics.getAll with status 200 or "error" with status 500 if an exception is thrown).
   - name: prefix
     desc: OpenMetrics/Prometheus metrics' name prefix
   - name: helpmap
     desc: OpenMetrics/Prometheus metrics' help map (see help ow.metrics.fromObj2OpenMetrics)
  exec : | #js
    ow.loadMetrics()
    args.port    = _$(args.port).isNumber().default(8091)
    args.uri     = _$(args.uri).isString().default("/metrics")
    
    args.metrics = _$(args.metrics).isString().default("try { var rrr = ow.server.httpd.reply(ow.metrics.fromObj2OpenMetrics((isDef(request.params.s) ? ow.metrics.getSome(request.params.s.split(\",\")) : ow.metrics.getAll()), " + stringify(args.prefix) + ", now(), " + stringify(args.helpmap,__,'') + ")); rrr.data = String(rrr.data); return rrr; } catch(e) { logErr(e); return { data: \"error\", status: 500, mimetype: \"text/plain\" }; } ")
    args.execURI = args.metrics

# ----------------------
- name : HTTP Add Metric
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdAddMetric
      keyArg: metric
      args  : 
        fn: fn
  help : 
   text   : Add a metric to the current daemon execution
   expects:
   - name: metric
     desc: Metric name
   - name: fn 
     desc: Metric function code returning a map
  exec: | #js
    _$(args.metric, "metric").$_()
    _$(args.fn, "fn").$_()
    ow.loadMetrics()
    ow.metrics.add(args.metric, new Function(args.fn))

# Defines an inline markdown response
#
# --------------------
- name : HTTP markdown
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdMD
      keyArg: port
      args  : 
        uri    : uri
        md     : md
  help :
   text: Adds a markdown URI
   expects:
   - name: port
     desc: The port of the HTTP Start Server (default to 8091)
   - name: uri
     desc: The uri to use (default /metrics)
   - name: md
     desc: The markdown content to be returned
  exec : | #js
    args.port    = _$(args.port).isNumber().default(8091)
    args.uri     = _$(args.uri).isString().default("/")
    args.md      = _$(args.md).isString().default("You need to provide a markdown content.")

    args.execURI = "try { return server.replyOKHTML(ow.template.parseMD2HTML(`" + args.md.replace(/\`/g, "\\`") + "`, true)) } catch(e) { logErr(e); return { data: \"error\", status: 500, mimetype: \"text/plain\" } }"

# Defines a classic HTTP file browse
#
# ---------------------------------
- name : HTTP Classical File Browse
  deps :
  - HTTP Start Server
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdClassicFileBrowse
      keyArg: port
      args  : 
        uri : uri
        path: path
  help :
    text   : Provides a classical HTTP file browse definition.
    expects:
    - name: port
      desc: (Number) The port where the server was made available (default is 8091)
    - name: uri
      desc: (String) The URI where the HTTP File Browse will be available.
    - name: path
      desc: (String) The canonical path (real path) to the folder that contains the file to be browsed.
  exec: | #js
    args.port    = _$(args.port).isNumber().default(8091)
    args.uri     = _$(args.uri).isString().default("/")
    _$(args.path).isString().$_("You need to provide a path.")

    global.__ojobHttp[args.port].addFileBrowse(args.uri, args.path)

# Defines a HTTP file browse
#
# -----------------------
- name : HTTP File Browse
  deps :
  - HTTP Start Server
  to   : HTTP Service
  typeArgs:
    noLog: false 
    shortcut:
      name  : httpdFileBrowse
      keyArg: port
      args  : 
        uri      : uri
        path     : path
        browse   : browse
        default  : default
        logo     : logo
        restrict : restrict
        incURI   : incURI
        sortTab  : sortTab
  help : 
   text   : Provides a HTTP file browse definition. 
   expects:
   - name: port
     desc: (Number) The port where the server was made available (default is 8091)
   - name: uri
     desc: (String) The URI where the HTTP File Browse will be available.
   - name: path
     desc: (String) The canonical path (real path) to the folder that contains the file to be browsed.
   - name: browse
     desc: (String) If "false" no browsing interface is included.
   - name: default
     desc: (String) The markdown or html filename to consider default (e.g. index.md)
   - name: logo
     desc: (String) The logo to include on the top right corner
   - name: restrict
     desc: (String) A comma separated list of regular expressions to restrict the access to the files
   - name: incURI
     desc: (Boolean) If true includes the URI in the breadcrumbs
   - name: sortTab
     desc: (Boolean) If true includes the table sorting script (OpenAF >= 20250402)
  check:
    in:
      port     : toNumber.isNumber.default(8091)
      uri      : isString.default("/")
      path     : isString.default(".")
      browse   : toBoolean.isBoolean.default(true)
      default  : isString.default(__)
      logo     : isString.default("/fonts/openaf_small.png")
      restrict : default(__)
      incURI   : toBoolean.isBoolean.default(false)
  args : 
   execURI   : | #js
      var shouldBrowse = global.__MHTTPD[String(port) + uri].BROWSE
      var path         = global.__MHTTPD[String(port) + uri].PATH
      var tmplb        = global.__MHTTPD[String(port) + uri].TMPLB
      var tmplh        = global.__MHTTPD[String(port) + uri].TMPLH
      var fdefault     = global.__MHTTPD[String(port) + uri].DEFAULT
      var restrict     = global.__MHTTPD[String(port) + uri].RESTRICT
      var incURI       = global.__MHTTPD[String(port) + uri].INCURI
      var sortTab      = global.__MHTTPD[String(port) + uri].SORTTAB

      var content = ""
      var puri = String(request.uri).replace(new RegExp("^" + uri), (uri == "/" ? "" : "/")).replace(/\/+/g, "/")
      var furi = String((new java.io.File(new java.io.File(String((new java.io.File(path + "/" + puri)).getCanonicalFile()).replace(/\\+/g, "/")))))

      if (!puri.endsWith("/")) puri += "/"

      var finfo
      try { 
         finfo = io.fileInfo(furi)
      } catch(e) {
         return server.replyOKHTML("")
      }

      if (finfo.isDirectory) { 
         if (isDef(fdefault) && io.fileExists(furi + "/" + fdefault)) {
            return (fdefault.endsWith(".md") ? 
                    ow.server.httpd.replyFileMD(server, path, uri, request.uri + "/" + fdefault) : ow.server.httpd.replyFile(server, path, uri, request.uri + "/" + fdefault))
         } else {
            if (shouldBrowse) { 
              content += tmplh({ puri: (!puri.startsWith("/") ? "/" + puri : puri) })
              content += "|   | Filename | Last modified | Size | Size in bytes |\n"
              content += "|---|----------|:-------------:|-----:|--------------:|\n"
              if (puri != "/" && puri != "") 
                content += "|  | __[..](<" + uri + puri.replace(/[^\/]+\/?$/, "") + ">)__ | | |\n"

              var theList = $from(io.listFiles(furi).files).sort("-isDirectory", "filename").select(f => {
                //if (f.filename.endsWith("/")) f.filename = f.filename.substr(0, f.filename.length-1)
                return merge(f, {
                  fLastModified: ow.format.fromDate(new Date(f.lastModified), 'yyyy-MM-dd HH:mm:ss'),
                  fSize        : ow.format.toBytesAbbreviation(f.size),
                  puri         : puri,
                  uri          : uri
                })
              })
              if (isDef(restrict)) {
                if (isString(restrict)) restrict = [ restrict ]
                lst = lst.filter(f => restrict.reduce((aP, aC) => (aP && !(new RegExp(aC)).test(f.filepath)), true))
              }
              content += tmplb(theList)
            }
         }
      } else {
         if (request.params.raw == "true") {
            return ow.server.httpd.replyFile(server, path, uri, request.uri)
         } else {
            var ext = String(furi).replace(/^.*\./, "")
            var fn = () => ow.server.httpd.replyFileMD(server, path, uri, request.uri)
            var fnLang = lang => {
               ow.loadTemplate()
               var _displayURI = uri.replace(/\/$/, "")
               _displayURI = _displayURI.replace(new RegExp("^" + uri), "")
               _displayURI += puri
               return server.reply( ow.template.parseMD2HTML("## " + $t("{{{ojh-buildBreadcrumbs '" + _displayURI + "' '" + uri + "' " + incURI + "}}}") + "<span onclick=\"history.back()\" onmouseout=\"this.style.textDecoration='none';\" onmouseover=\"this.style.textDecoration='underline';\" style=\"padding-left: 1em; float: right; text-decoration: none; cursor: pointer;\">&larr;</span>\n\n```" + lang + "\n" + io.readFileString(furi) + "\n```\n", true, true), "text/html", 200)
            }
            switch(ext) {
            case "md"  : return fn()
            case "yml" :
            case "yaml": return fnLang("yaml")
            case "sh"  : return fnLang("sh")
            case "css" : return fnLang("css")
            case "sh"  : return fnLang("sh")
            case "js"  : return fnLang("js")
            case "java": return fnLang("java")
            case "py"  : return fnLang("python")
            case "toml": return fnLang("toml")
            case "hbs" : return fnLang("handlebars")
            case "json":
              if (request.params.parse == "false") {
                return fnLang("json")
              } else {
                var _d = io.readFileJSON(furi)
                if (isMap(_d) || isArray(_d))
                  return ow.server.httpd.replyJSMap(server, _d)
                else
                  return fn()           
              }        
            case "adoc":
              if (isDef(getOPackPath("Asciidoc"))) {
                loadLib("asciidoc.js")
                return ow.server.httpd.replyAsciidoc(server, path, uri, request.uri)
              }              
            default: 
              return ow.server.httpd.replyFile(server, path, uri, request.uri)
            }
         }
      }
      
      if (sortTab) content += "<script src=\"/js/mdtablesort.js\"></script>\n"

      if (shouldBrowse)
         return server.replyOKHTML(ow.template.parseMD2HTML(content, true))
      else
         return server.replyOKHTML("")

  exec : | #js
      ow.loadTemplate(); ow.loadFormat()
      ow.template.addHelper("encodeURI", encodeURI)

      args.uri  = _$(args.uri).isString().default("/")
      args.path = _$(args.path).isString().default(".")

      ow.template.addHelper("escapeMDTable", str => str.replace(/\|/g, "\\|"))
      ow.template.addHelper("ojh-buildBreadcrumbs", (path, _uri, _incURI) => {
        // Remove any leading or trailing slashes and split into segments.
        const trimmedPath = path.replace(/^\/|\/$/g, '')
        const segments = trimmedPath ? trimmedPath.split('/') : []
        
        // Start with the clickable root.
        let html = ""
        if (!_incURI) 
          html = `<a href="/" title="Navigate to root"> / </a>`
        else 
          html = `<a href="${_uri}" title="Navigate to root"> ${_uri.replace(/^\//, "/ ")} / </a>`
        
        let currentPath = _uri
        segments.forEach((segment, index) => {
          currentPath += "/" + segment  // Build up the path.
          // Add separator before each segment.
          if (index > 0) html += ' / '
          
          // If it's the last segment (current location), show as plain text.
          if (index === segments.length - 1) {
            html += `<span>${segment}</span>`
          } else {
            html += `<a href="${currentPath}/" title="Navigate to ${currentPath}/">${segment}</a>`
          }
        })

        return html
      })

      args.logo = _$(args.logo, "logo").isString().default("/fonts/openaf_small.png")

      var temph = _$(args.templateHead).isString().default("## {{{ojh-buildBreadcrumbs puri '" + args.uri + "' " + args.incURI + "}}}<img style=\"padding-left: 1em;\" align=\"right\" src=\"" + args.logo + "\">\n")
      var templ = _$(args.template).isString().default("{{#each this}}| {{#if isDirectory}}{{else}}<a href=\"{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}?raw=true\" download=\"{{encodeURI filename}}\">&darr;</a>{{/if}} | {{#if isDirectory}}__[{{escapeMDTable filename}}](<{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}>)__ | {{fLastModified}} | | {{else}} [{{escapeMDTable filename}}](<{{encodeURI uri}}{{encodeURI puri}}{{encodeURI filename}}>) | {{fLastModified}} {{/if}} | {{fSize}} | {{size}} | \n{{/each}}")

      global.__MHTTPD = _$(global.__MHTTPD).isMap().default({})
      global.__MHTTPD[String(args.port) + args.uri] = {
        BROWSE  : args.browse,
        PATH    : String( (new java.io.File( args.path )).getCanonicalPath() ),
        TMPLB   : ow.template.execCompiled(ow.template.compile(templ)),
        TMPLH   : ow.template.execCompiled(ow.template.compile(temph)),
        INCURI  : args.incURI,
        URI     : args.uri,
        DEFAULT : _$(args.default).isString().default(__),
        RESTRICT: args.restrict,
        SORTTAB : args.sortTab
      }