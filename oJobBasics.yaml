# Define the jobs
#
jobs:
  ## ----------------------
  ## oJob Start/Stop basics
  ## ----------------------

  # Start processing
  - name        : oJob Start
    exec        : >
      log("init");
    
  # Stop processing on shutdown
  - name        : oJob Shutdown
    deps        :
       - oJob Start
    type        : shutdown
    exec        : >
      log("done");

  # Stop processing
  - name        : oJob Stop
    deps        :
       - oJob Start
    exec        : >
      log("done");

  # Exit the current script (include openaf-console)
  - name        : oJob Exit
    exec        : exit(0);

  ## -----
  ## Utils
  ## -----
  
  # Sleep for 5 seconds
  - name        : oJob Sleep 5s
    exec        : sleep(5000); 
    
  ## ------------
  ## oJob shell
  ## ------------
  
  # Run a shell command
  # - args.visible
  # - args.stdin
  # - args.exitcode
  # - args.stdout
  # - args.stderr
  # - args.directory
  # - args.cmd
  - name        : oJob sh
    exec        : >
      if (isUnDef(args.visible)) args.visible = true;
      if (isUnDef(args.stdin)) args.stdin = true;
      if (isUnDef(args.exitcode)) args.exitcode = 0;
      args.stdout = sh(args.cmd, args.stdin, args.timeout, args.visible, args.directory);
      args.stderr = __stderr;
      if (__exitcode != args.exitcode) throw "Exit code: " + __exitcode;

  ## ------------
  ## oJob Logging
  ## ------------
  
  # Display oJob Log
  - name        : oJob Show Log
    exec        : >
      log(stringify(
        (isUnDef(args.name) ? 
         ow.oJob.getLogCh().getAll() 
         : 
         $from(ow.oJob.getLogCh().getAll()).equals("name", args.name).select()
        )
      ));

  - name        : oJob Log
    exec        : >
      try {
        plugin("Console"); var con = (new Console()).getConsoleReader();
        var w = con.getTerminal().getWidth();
        var ansis = con.getTerminal().isAnsiSupported() && (java.lang.System.console() != null);
        var jansi = JavaImporter(Packages.org.fusesource.jansi);
        
        var s = "", ss = "";
        if (ansis) {
           jansi.AnsiConsole.systemInstall();
           s  = repeat(w, '-');
           ss = repeat(w, '=');
        } else {
           s  = repeat(80, '-');
           ss = repeat(80, '=');
        }
     
        var _c = function(m) { 
           return ansis ? 
                  jansi.Ansi.ansi().boldOff().fg(jansi.Ansi.Color.GREEN).a(m).a(jansi.Ansi.Attribute.RESET) 
                : m; 
        }
  
        var _b = function(m) { 
           return ansis ? 
                  jansi.Ansi.ansi().bold().a(m).a(jansi.Ansi.Attribute.RESET) 
                : m; 
        }
        
        var _e = function(m) { 
           return ansis ? 
                  jansi.Ansi.ansi().bold().fg(jansi.Ansi.Color.RED).a(m).a(jansi.Ansi.Attribute.RESET) 
                : m; 
        }
  
        $ch("oJob::log").subscribe(function(aCh, aOp, aK, aV) {
          try {
             if (aV.name != 'oJob Log') {
               var msg = "[" + aV.name + "] | ";
               if (aV.start && (!aV.error && !aV.success)) { print(_b(msg + "STARTED | " + new Date()) + "\n" + _c(s)); }
               if (aV.start && aV.error)                   { printErr("\n" + _e(ss) + _b(msg + "Ended in ERROR  | " + new Date()) + "\n" + stringify(aV) + "\n" + _e(ss)); }
               if (aV.start && aV.success)                 { print("\n" + _c(ss)); print(_b(msg + "Ended with SUCCESS | " + new Date()) + "\n"); }
               if (!aV.deps)                               { }
             }
          } catch(e) { logErr(e);}
        });
      } catch(e) { logErr(e); } finally { if (ansis) jansi.AnsiConsole.systemUninstall(); }

todo:
   - oJob Log
